require('dotenv').config();
const express = require('express');
const multer = require('multer');
const ffmpeg = require('fluent-ffmpeg');
const sharp = require('sharp');
const fs = require('fs');
const fsPromises = fs.promises;
const path = require('path');
const cors = require('cors');
const libre = require('libreoffice-convert');
const imagemagick = require('imagemagick');
const { optimize } = require('svgo');
const sevenZip = require('node-7z');
const { exec } = require('child_process');
const tmp = require('tmp');

const app = express();
const port = process.env.PORT || 5001;

app.use(cors({
  origin: 'http://localhost:5173',
  methods: ['GET', 'POST', 'DELETE'],
  allowedHeaders: ['Content-Type'],
}));

const allFormats = [
  'bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg',
  'pdf', 'docx', 'txt', 'rtf', 'odt',
  'mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'm4v', 'mmf', '3g2',
  'mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv',
  'zip', '7z',
  'epub', 'mobi', 'azw3'
];

const supportedFormats = {
  image: allFormats,
  compressor: ['jpg', 'png', 'svg'],
  pdfs: allFormats,
  audio: allFormats,
  video: allFormats,
  document: allFormats,
  archive: allFormats,
  ebook: allFormats,
};

const upload = multer({
  dest: 'uploads/',
  limits: { fileSize: 100 * 1024 * 1024 },
  fileFilter: (req, file, cb) => {
    const allowedExtensions = allFormats.map(ext => `.${ext}`);
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowedExtensions.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error(`Unsupported file type: ${ext}. Supported types: ${allFormats.join(', ')}`), false);
    }
  },
});

const uploadsDir = path.join(__dirname, 'uploads');
const convertedDir = path.join(__dirname, 'converted');
fsPromises.mkdir(uploadsDir, { recursive: true });
fsPromises.mkdir(convertedDir, { recursive: true });

app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK' });
});

app.post('/api/convert', upload.array('files', 5), async (req, res) => {
  console.log('Received /api/convert request', {
    files: req.files ? req.files.map(f => f.originalname) : [],
    formats: req.body.formats,
  });
  let tempFiles = req.files ? req.files.map(f => f.path) : [];
  try {
    const files = req.files;
    let formats;
    try {
      formats = JSON.parse(req.body.formats || '[]');
    } catch (parseError) {
      console.error('Error parsing formats:', parseError);
      return res.status(400).json({ error: 'Invalid formats data. Please provide valid JSON.' });
    }
    if (!files || files.length === 0) {
      console.error('No files uploaded');
      return res.status(400).json({ error: 'No files uploaded.' });
    }
    if (files.length > 5) {
      console.error('Too many files uploaded');
      return res.status(400).json({ error: 'Maximum 5 files allowed.' });
    }
    if (files.length !== formats.length) {
      console.error(`Mismatch between files (${files.length}) and formats (${formats.length})`);
      return res.status(400).json({
        error: `Mismatch between files and formats. Files: ${files.length}, Formats: ${formats.length}`,
      });
    }
    const outputFiles = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const formatInfo = formats[i];
      const inputExt = path.extname(file.originalname).toLowerCase().slice(1) || 'unknown';
      const outputExt = formatInfo.target.toLowerCase().split(' ')[0];
      console.log(`Processing file: ${file.originalname}, type: ${formatInfo.type}, inputExt: ${inputExt}, target: ${outputExt}`);
      if (!Object.keys(supportedFormats).includes(formatInfo.type)) {
        throw new Error(`Unsupported conversion type: ${formatInfo.type}. Supported types: ${Object.keys(supportedFormats).join(', ')}`);
      }
      if (!supportedFormats[formatInfo.type].includes(outputExt)) {
        throw new Error(`Unsupported output format: ${outputExt} for type ${formatInfo.type}. Supported formats: ${supportedFormats[formatInfo.type].join(', ')}`);
      }
      if (!allFormats.includes(inputExt)) {
        throw new Error(`Unsupported input format: ${inputExt}. Supported formats: ${allFormats.join(', ')}`);
      }
      const inputPath = file.path;
      const outputPath = path.join(
        convertedDir,
        `${path.basename(file.filename, path.extname(file.filename))}_${Date.now()}.${outputExt}`
      );
      try {
        await fsPromises.access(inputPath);
      } catch {
        throw new Error(`Input file not found: ${file.originalname}`);
      }
      const outputType = ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(outputExt) ? 'image' :
        ['pdf', 'docx', 'txt', 'rtf', 'odt'].includes(outputExt) ? 'document' :
          ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'm4v', 'mmf', '3g2'].includes(outputExt) ? 'audio' :
            ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv'].includes(outputExt) ? 'video' : formatInfo.type;
      switch (outputType) {
        case 'image':
        case 'compressor':
          await convertImage(inputPath, outputPath, outputExt, formatInfo.subSection);
          break;
        case 'document':
          await convertDocument(inputPath, outputPath, outputExt);
          break;
        case 'pdfs':
          await convertPdf(inputPath, outputPath, outputExt);
          break;
        case 'audio':
        case 'video':
          await convertMedia(inputPath, outputPath, outputExt, inputExt);
          break;
        case 'archive':
          await convertArchive(inputPath, outputPath, outputExt);
          break;
        case 'ebook':
          await convertEbook(inputPath, outputPath, outputExt);
          break;
        default:
          throw new Error(`Unsupported conversion type: ${outputType}`);
      }
      outputFiles.push({
        path: outputPath,
        name: path.basename(outputPath),
        id: formatInfo.id,
      });
    }
    res.json({
      files: outputFiles.map(file => ({
        name: file.name,
        path: `/converted/${file.name}`,
        id: file.id,
      })),
    });
  } catch (error) {
    console.error('Conversion error:', error.message);
    res.status(500).json({ error: error.message || 'Conversion failed.' });
  } finally {
    await cleanupFiles(tempFiles.filter(file => file.startsWith(uploadsDir)));
  }
});

app.get('/converted/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(convertedDir, filename);
  console.log(`Serving file: ${filePath}`);
  try {
    await fsPromises.access(filePath);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.sendFile(filePath, (err) => {
      if (err) {
        console.error('Error sending file:', err);
        res.status(500).json({ error: 'Failed to send converted file.' });
      } else {
        console.log(`File sent successfully: ${filePath}`);
      }
    });
  } catch (err) {
    console.error('File not found:', filePath, err);
    res.status(404).json({ error: 'Converted file not found.' });
  }
});

app.delete('/api/delete/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.join(convertedDir, filename);
  try {
    await cleanupFiles([filePath]);
    res.status(200).json({ message: `File ${filename} deleted successfully.` });
  } catch (err) {
    console.error(`Error deleting file ${filePath}:`, err);
    res.status(500).json({ error: `Failed to delete file ${filename}.` });
  }
});

async function convertImage(inputPath, outputPath, format, subSection) {
  const imageFormats = ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'];
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  const sharpSupported = ['bmp', 'gif', 'png', 'tiff', 'webp', 'jpg', 'jpeg'];
  if (!imageFormats.includes(inputExt) && ['pdf', 'docx', 'txt', 'rtf', 'odt'].includes(inputExt)) {
    const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
    try {
      await convertDocument(inputPath, tempPdfPath, 'pdf');
      await convertImage(tempPdfPath, outputPath, format, subSection);
      await fsPromises.unlink(tempPdfPath).catch(err => console.error(`Error cleaning up temp PDF: ${err.message}`));
    } catch (err) {
      console.error(`Image conversion preprocessing failed: ${err.message}`);
      throw err;
    }
    return;
  }
  if (imageFormats.includes(format)) {
    if (subSection === 'compressor' && format === 'svg') {
      const svgData = await fsPromises.readFile(inputPath, 'utf-8');
      const result = optimize(svgData, {
        multipass: true,
        plugins: [
          { name: 'preset-default' },
          { name: 'removeViewBox', active: false },
        ],
      });
      if (result.error) {
        throw new Error(`SVG compression failed: ${result.error}`);
      }
      await fsPromises.writeFile(outputPath, result.data);
      console.log(`SVG compression completed: ${outputPath}`);
    } else if (sharpSupported.includes(format)) {
      let sharpInstance = sharp(inputPath);
      if (subSection === 'compressor') {
        if (format === 'jpg' || format === 'jpeg') {
          sharpInstance = sharpInstance.jpeg({ quality: 80 });
        } else if (format === 'png') {
          sharpInstance = sharpInstance.png({ compressionLevel: 9 });
        }
      }
      await sharpInstance
        .toFormat(format === 'jpg' ? 'jpeg' : format)
        .toFile(outputPath);
      console.log(`Image conversion (Sharp) completed: ${outputPath}`);
    } else {
      await new Promise((resolve, reject) => {
        imagemagick.convert([inputPath, outputPath], (err) => {
          if (err) {
            console.error(`ImageMagick conversion failed for ${format}: ${err.message}`);
            return reject(new Error(`Image conversion failed: ${err.message}`));
          }
          console.log(`Image conversion (ImageMagick) completed: ${outputPath}`);
          resolve();
        });
      });
    }
  } else if (format === 'pdf') {
    await new Promise((resolve, reject) => {
      imagemagick.convert([inputPath, outputPath], (err) => {
        if (err) {
          console.error(`Image to PDF conversion failed: ${err.message}`);
          return reject(new Error(`Image to PDF conversion failed: ${err.message}`));
        }
        console.log(`Image to PDF conversion completed: ${outputPath}`);
        resolve();
      });
    });
  } else {
    throw new Error(`Unsupported image output format: ${format}`);
  }
}

async function convertPdf(inputPath, outputPath, format) {
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  if (inputExt !== 'pdf') {
    const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
    try {
      await convertDocument(inputPath, tempPdfPath, 'pdf');
      await convertPdf(tempPdfPath, outputPath, format);
      await fsPromises.unlink(tempPdfPath).catch(err => console.error(`Error cleaning up temp PDF: ${err.message}`));
    } catch (err) {
      console.error(`PDF conversion preprocessing failed: ${err.message}`);
      throw err;
    }
    return;
  }
  if (['jpg', 'png', 'gif'].includes(format)) {
    await new Promise((resolve, reject) => {
      imagemagick.convert([inputPath, outputPath], (err) => {
        if (err) {
          console.error(`PDF to ${format} conversion failed: ${err.message}`);
          return reject(new Error(`PDF to ${format} conversion failed: ${err.message}`));
        }
        console.log(`PDF to ${format} conversion completed: ${outputPath}`);
        resolve();
      });
    });
  } else if (format === 'docx') {
    const pdfBuffer = await fsPromises.readFile(inputPath);
    await new Promise((resolve, reject) => {
      libre.soffice = process.env.LIBREOFFICE_PATH || '/usr/bin/soffice';
      tmp.dir({ unsafeCleanup: true }, (err, tempDir, cleanupCallback) => {
        if (err) return reject(new Error(`Failed to create temporary directory: ${err.message}`));
        libre.convert(pdfBuffer, '.docx', { tmpDir: tempDir }, (err, docxBuffer) => {
          if (err) {
            cleanupCallback();
            return reject(new Error(`PDF to DOCX conversion failed: ${err.message}`));
          }
          fsPromises.writeFile(outputPath, docxBuffer)
            .then(() => {
              cleanupCallback();
              console.log(`PDF to DOCX conversion completed: ${outputPath}`);
              resolve();
            })
            .catch((writeErr) => {
              cleanupCallback();
              reject(writeErr);
            });
        });
      });
    });
  } else {
    throw new Error(`Unsupported PDF output format: ${format}`);
  }
}

async function convertDocument(inputPath, outputPath, format) {
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  const supportedDocumentFormats = ['docx', 'pdf', 'txt', 'rtf', 'odt'];
  if (['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(inputExt)) {
    const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
    try {
      await convertImage(inputPath, tempPdfPath, 'pdf', 'image');
      await convertDocument(tempPdfPath, outputPath, format);
      await fsPromises.unlink(tempPdfPath).catch(err => console.error(`Error cleaning up temp PDF: ${err.message}`));
    } catch (err) {
      console.error(`Document conversion preprocessing failed: ${err.message}`);
      throw err;
    }
    return;
  }
  if (!supportedDocumentFormats.includes(format)) {
    throw new Error(`Unsupported output document format: ${format}`);
  }
  const inputBuffer = await fsPromises.readFile(inputPath);
  await new Promise((resolve, reject) => {
    libre.soffice = process.env.LIBREOFFICE_PATH || '/usr/bin/soffice';
    tmp.dir({ unsafeCleanup: true }, (err, tempDir, cleanupCallback) => {
      if (err) return reject(new Error(`Failed to create temporary directory: ${err.message}`));
      libre.convert(inputBuffer, `.${format}`, { tmpDir: tempDir }, (err, buffer) => {
        if (err) {
          cleanupCallback();
          console.error(`Document conversion failed: ${err.message}`);
          return reject(new Error(`Document conversion failed: ${err.message}`));
        }
        fsPromises.writeFile(outputPath, buffer)
          .then(() => {
            cleanupCallback();
            console.log(`Document conversion completed: ${outputPath}`);
            resolve();
          })
          .catch((writeErr) => {
            cleanupCallback();
            reject(writeErr);
          });
      });
    });
  });
}

async function convertMedia(inputPath, outputPath, format, inputExt) {
  const supportedAudioFormats = ['aac', 'aiff', 'flac', 'm4v', 'mmf', 'ogg', 'opus', 'wav', 'wma', '3g2', 'mp3'];
  const supportedVideoFormats = ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv', '3g2'];
  if (!supportedAudioFormats.includes(format) && !supportedVideoFormats.includes(format)) {
    throw new Error(`Unsupported media output format: ${format}`);
  }
  return new Promise((resolve, reject) => {
    const ffmpegInstance = ffmpeg(inputPath);
    const isAudioInput = ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'mmf'].includes(inputExt);
    const isVideoOutput = supportedVideoFormats.includes(format);

    if (isVideoOutput && isAudioInput) {
      ffmpegInstance
        .input('color=c=black:s=320x240:r=25')
        .inputFormat('lavfi')
        .videoCodec('mpeg4')
        .audioCodec('aac')
        .outputOptions('-shortest');
    } else {
      if (format === 'aac') {
        ffmpegInstance.audioCodec('aac');
      } else if (format === 'wma') {
        ffmpegInstance.audioCodec('wmav2');
      } else if (format === 'm4v' || format === '3g2') {
        ffmpegInstance
          .videoCodec('mpeg4')
          .audioCodec('aac');
      } else if (format === 'mmf') {
        ffmpegInstance.audioCodec('pcm_s16le');
      } else if (supportedVideoFormats.includes(format)) {
        ffmpegInstance
          .videoCodec('libx264')
          .audioCodec('aac');
      }
    }

    ffmpegInstance
      .toFormat(format)
      .on('start', (cmd) => console.log(`FFmpeg command: ${cmd}`))
      .on('end', () => {
        console.log(`Media conversion completed: ${outputPath}`);
        resolve();
      })
      .on('error', (err) => {
        console.error(`Media conversion error for ${format}: ${err.message}`);
        reject(new Error(`Media conversion failed: ${err.message}`));
      })
      .save(outputPath);
  });
}

async function convertArchive(inputPath, outputPath, format) {
  if (format === 'zip' || format === '7z') {
    return new Promise((resolve, reject) => {
      sevenZip.add(outputPath, inputPath, { $raw: { '-t': format } })
        .on('end', () => {
          console.log(`Archive conversion completed: ${outputPath}`);
          resolve();
        })
        .on('error', (err) => {
          console.error(`Archive conversion error: ${err.message}`);
          reject(new Error(`Archive conversion failed: ${err.message}`));
        });
    });
  } else {
    throw new Error(`Unsupported archive format: ${format}`);
  }
}

async function convertEbook(inputPath, outputPath, format) {
  return new Promise((resolve, reject) => {
    exec(`ebook-convert "${inputPath}" "${outputPath}"`, (err) => {
      if (err) {
        console.error(`Ebook conversion error: ${err.message}`);
        return reject(new Error(`Ebook conversion failed: ${err.message}`));
      }
      console.log(`Ebook conversion completed: ${outputPath}`);
      resolve();
    });
  });
}

async function cleanupFiles(filePaths) {
  const maxRetries = 3;
  const retryDelay = 1000;
  const cleanupPromises = filePaths.map(async (filePath) => {
    let attempts = 0;
    while (attempts < maxRetries) {
      try {
        await fsPromises.access(filePath);
        await fsPromises.unlink(filePath);
        console.log(`Deleted file: ${filePath}`);
        return;
      } catch (err) {
        if (err.code === 'EPERM') {
          attempts++;
          console.warn(`EPERM error on attempt ${attempts} for ${filePath}. Retrying in ${retryDelay}ms...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          if (attempts === maxRetries) {
            console.error(`Failed to delete file ${filePath} after ${maxRetries} attempts: ${err.message}`);
          }
        } else {
          console.error(`Error deleting file ${filePath}:`, err);
          break;
        }
      }
    }
  });
  await Promise.all(cleanupPromises);
}

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
}); this is my server.js 
PORT=5001 FRONTEND_URL=http://localhost:5173 CONVERSION_TIMEOUT=120000 LIBREOFFICE_PATH=C:\Program Files\LibreOffice\program\soffice.exe
this is my .env file backened 
import React, { useEffect, useRef, useState } from "react";
import { FaFolderOpen, FaDropbox, FaGoogleDrive } from "react-icons/fa";
import { FiArrowRight, FiDownload } from "react-icons/fi";

declare global {
  interface Window {
    Dropbox: any;
    gapi: any;
    google: any;
    onApiLoad?: () => void;
  }
}

interface FileItem {
  file: File;
  showMenu: boolean;
  section: keyof FormatOptions;
  selectedFormat: string;
  source?: string;
  url?: string;
  id: string;
  selectedSubSection?: string;
}

interface FormatOptions {
  image: {
    image: string[];
    compressor: string[];
    pdf: string[];
  };
  pdfs: {
    document: string[];
    compressor: string[];
    ebook: string[];
    pdf_ebook: string[];
    pdf_to_image: string[];
  };
  audio: {
    audio: string[];
  };
  video: {
    audio: string[];
    device: string[];
    video: string[];
    compressor: string[];
    webservice: string[];
  };
  document: string[];
  archive: string[];
  ebook: string[];
}

interface ConvertedFile {
  name: string;
  url: string;
  loading: boolean;
  originalId: string;
}

export default function Dropbox() {
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID!;
  const GOOGLE_API_KEY = import.meta.env.VITE_GOOGLE_API_KEY!;
  const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5001";

  const fileInputRef = useRef<HTMLInputElement>(null);
  const pickerLoaded = useRef(false);
  const [selectedFiles, setSelectedFiles] = useState<FileItem[]>([]);
  const [isConverting, setIsConverting] = useState(false);
  const [convertedFiles, setConvertedFiles] = useState<ConvertedFile[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  useEffect(() => {
    const loadGoogleApiScript = () => {
      if (!document.querySelector('script[src="https://apis.google.com/js/api.js"]')) {
        const script = document.createElement("script");
        script.src = "https://apis.google.com/js/api.js";
        script.async = true;
        script.onload = () => {
          console.log("Google API script loaded");
          initializeGoogleApi();
        };
        script.onerror = () => {
          console.error("Failed to load Google API script");
          setErrorMessage("Failed to load Google API script. Please check your network or browser settings.");
        };
        document.body.appendChild(script);
      } else {
        initializeGoogleApi();
      }
    };

    const initializeGoogleApi = async () => {
      if (!window.gapi) {
        console.error("Google API (gapi) not available");
        setErrorMessage("Google API not available. Retrying in 5 seconds...");
        setTimeout(initializeGoogleApi, 5000);
        return;
      }
      try {
        window.onApiLoad = () => {
          window.gapi.load("client:auth2", async () => {
            try {
              await window.gapi.client.init({
                apiKey: GOOGLE_API_KEY,
                clientId: GOOGLE_CLIENT_ID,
                scope: "https://www.googleapis.com/auth/drive.readonly",
                discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"],
                prompt: "select_account",
              });
              console.log("Google API client initialized");
              window.gapi.load("picker", {
                callback: () => {
                  if (window.google?.picker) {
                    pickerLoaded.current = true;
                    console.log("Google Picker API loaded");
                  } else {
                    console.error("Google Picker API not available");
                    setErrorMessage("Google Picker API failed to load. Please try again.");
                  }
                },
              });
            } catch (err) {
              console.error("Google API initialization failed:", err);
              setErrorMessage("Failed to initialize Google API. Check your API key, client ID, or network connection.");
            }
          });
        };
        window.onApiLoad();
      } catch (err) {
        console.error("Error setting up Google API:", err);
        setErrorMessage("Failed to set up Google API. Please try again later.");
      }
    };

    loadGoogleApiScript();

    return () => {
      convertedFiles.forEach(file => window.URL.revokeObjectURL(file.url));
      delete window.onApiLoad;
    };
  }, [convertedFiles, GOOGLE_API_KEY, GOOGLE_CLIENT_ID]);

  const handleLocalFileClick = () => fileInputRef.current?.click();

  const handleLocalFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      if (selectedFiles.length + files.length > 5) {
        setErrorMessage("Maximum 5 files allowed.");
        return;
      }
      const newFiles = Array.from(files).map((f) => {
        const ext = f.name.split('.').pop()?.toLowerCase() || '';
        const section = ext === 'pdf' ? 'pdfs' :
          ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(ext) ? 'image' :
            ['doc', 'docx', 'txt', 'rtf', 'odt', 'html', 'ppt', 'pptx', 'xlsx'].includes(ext) ? 'document' :
              ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'm4v', 'mmf', '3g2'].includes(ext) ? 'audio' :
                ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv', '3gp', 'mpg', 'ogv'].includes(ext) ? 'video' :
                  ['zip', '7z'].includes(ext) ? 'archive' :
                    ['epub', 'mobi', 'azw3', 'fb2', 'lit', 'lrf', 'pdb', 'tcr'].includes(ext) ? 'ebook' : 'image';
        return {
          file: f,
          showMenu: false,
          section: section as keyof FormatOptions,
          selectedFormat: "",
          source: 'local',
          id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
        };
      });
      setSelectedFiles((prev) => [...prev, ...newFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const handleDropboxUpload = () => {
    if (!window.Dropbox) {
      setErrorMessage("Dropbox SDK not loaded.");
      return;
    }
    window.Dropbox.choose({
      linkType: "direct",
      multiselect: true,
      extensions: [
        '.mp3', '.wav', '.aac', '.flac', '.ogg', '.opus', '.wma', '.aiff', '.m4v', '.mmf', '.3g2',
        '.mp4', '.avi', '.mov', '.webm', '.mkv', '.flv', '.wmv', '.3gp', '.mpg', '.ogv',
        '.png', '.jpg', '.jpeg', '.webp', '.svg', '.bmp', '.gif', '.ico', '.tga', '.tiff', '.wbmp',
        '.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt', '.html', '.ppt', '.pptx', '.xlsx',
        '.zip', '.7z',
        '.epub', '.mobi', '.azw3', '.fb2', '.lit', '.lrf', '.pdb', '.tcr',
      ],
      success: async (files: any[]) => {
        if (selectedFiles.length + files.length > 5) {
          setErrorMessage("Maximum 5 files allowed.");
          return;
        }
        const newFiles = await Promise.all(files.map(async (f) => {
          try {
            const response = await fetch(f.link);
            if (!response.ok) throw new Error(`Failed to fetch Dropbox file: ${f.name}`);
            const blob = await response.blob();
            const ext = f.name.split('.').pop()?.toLowerCase() || '';
            const section = ext === 'pdf' ? 'pdfs' :
              ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(ext) ? 'image' :
                ['doc', 'docx', 'txt', 'rtf', 'odt', 'html', 'ppt', 'pptx', 'xlsx'].includes(ext) ? 'document' :
                  ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'm4v', 'mmf', '3g2'].includes(ext) ? 'audio' :
                    ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv', '3gp', 'mpg', 'ogv'].includes(ext) ? 'video' :
                      ['zip', '7z'].includes(ext) ? 'archive' :
                        ['epub', 'mobi', 'azw3', 'fb2', 'lit', 'lrf', 'pdb', 'tcr'].includes(ext) ? 'ebook' : 'image';
            return {
              file: new File([blob], f.name, { type: blob.type }),
              showMenu: false,
              section: section as keyof FormatOptions,
              selectedFormat: "",
              source: 'dropbox',
              url: f.link,
              id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
            };
          } catch (err) {
            console.error(`Error fetching Dropbox file ${f.name}:`, err);
            return null;
          }
        }));
        const validFiles = newFiles.filter(f => f !== null) as FileItem[];
        setSelectedFiles((prev) => [...prev, ...validFiles]);
        setConvertedFiles([]);
        setErrorMessage(null);
      },
      error: (err: any) => {
        console.error("Dropbox picker error:", err);
        setErrorMessage("Failed to load files from Dropbox.");
      },
    });
  };

  const handleGoogleDriveUpload = () => {
    if (!pickerLoaded.current) {
      console.warn("Google Picker not loaded yet. Attempting to initialize...");
      setErrorMessage("Google Picker is not ready. Please try again in a moment.");
      window.gapi?.load("picker", {
        callback: () => {
          if (window.google?.picker) {
            pickerLoaded.current = true;
            console.log("Google Picker API loaded on retry");
            triggerGoogleSignIn();
          } else {
            console.error("Google Picker API failed to load on retry");
            setErrorMessage("Google Picker failed to load. Please refresh the page.");
          }
        },
      });
      return;
    }
    triggerGoogleSignIn();
  };

  const triggerGoogleSignIn = async () => {
    if (!window.gapi?.auth2) {
      console.error("Google auth2 not available");
      setErrorMessage("Google authentication service not available. Retrying in 5 seconds...");
      setTimeout(triggerGoogleSignIn, 5000);
      return;
    }
    try {
      const auth2 = window.gapi.auth2.getAuthInstance();
      const googleUser = await auth2.signIn({
        prompt: "select_account consent",
        scope: "https://www.googleapis.com/auth/drive.readonly",
      });
      const token = googleUser.getAuthResponse().access_token;
      console.log("Google Sign-in successful, access token:", token);
      createGooglePicker(token);
    } catch (err: any) {
      console.error("Google Sign-in failed:", err);
      if (err.error === "idpiframe_initialization_failed") {
        setErrorMessage("Google Sign-in failed: Third-party cookies are blocked. Please enable cookies in your browser settings or try a different browser.");
      } else if (err.error === "IdentityCredentialError") {
        setErrorMessage("Google Sign-in failed: Unable to retrieve token. Check your credentials or try again.");
      } else {
        setErrorMessage(`Google Sign-in failed: ${err.error || "Unknown error"}. Please check your credentials or try again.`);
      }
    }
  };

  const createGooglePicker = async (token: string) => {
    if (pickerLoaded.current && token && window.google?.picker) {
      console.log("Creating Google Picker with token:", token);
      const picker = new window.google.picker.PickerBuilder()
        .addView(window.google.picker.ViewId.DOCS)
        .setOAuthToken(token)
        .setDeveloperKey(GOOGLE_API_KEY)
        .setCallback(async (data: any) => {
          if (data.action === window.google.picker.Action.PICKED) {
            console.log("Files picked from Google Drive:", data.docs);
            if (selectedFiles.length + data.docs.length > 5) {
              setErrorMessage("Maximum 5 files allowed.");
              return;
            }
            const newFiles = await Promise.all(data.docs.map(async (doc: any) => {
              try {
                const response = await fetch(
                  `https://www.googleapis.com/drive/v3/files/${doc.id}?alt=media`,
                  {
                    headers: { Authorization: `Bearer ${token}` },
                  }
                );
                if (!response.ok) throw new Error(`Failed to fetch Google Drive file: ${doc.name}`);
                const blob = await response.blob();
                const ext = doc.name.split('.').pop()?.toLowerCase() || '';
                const section = ext === 'pdf' ? 'pdfs' :
                  ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(ext) ? 'image' :
                    ['doc', 'docx', 'txt', 'rtf', 'odt', 'html', 'ppt', 'pptx', 'xlsx'].includes(ext) ? 'document' :
                      ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma', 'aiff', 'm4v', 'mmf', '3g2'].includes(ext) ? 'audio' :
                        ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv', '3gp', 'mpg', 'ogv'].includes(ext) ? 'video' :
                          ['zip', '7z'].includes(ext) ? 'archive' :
                            ['epub', 'mobi', 'azw3', 'fb2', 'lit', 'lrf', 'pdb', 'tcr'].includes(ext) ? 'ebook' : 'image';
                return {
                  file: new File([blob], doc.name, { type: blob.type }),
                  showMenu: false,
                  section: section as keyof FormatOptions,
                  selectedFormat: "",
                  source: 'google',
                  url: doc.url,
                  id: `${doc.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
                };
              } catch (err) {
                console.error(`Error fetching Google Drive file ${doc.name}:`, err);
                return null;
              }
            }));
            const validFiles = newFiles.filter(f => f !== null) as FileItem[];
            setSelectedFiles((prev) => [...prev, ...validFiles]);
            setConvertedFiles([]);
            setErrorMessage(null);
          }
        })
        .build();
      picker.setVisible(true);
    } else {
      console.error("Cannot create Google Picker. PickerLoaded:", pickerLoaded.current, "Token:", !!token, "Google Picker:", !!window.google?.picker);
      setErrorMessage("Failed to create Google Picker. Please try again.");
    }
  };

  const formatOptions: FormatOptions = {
    image: {
      image: ["BMP", "EPS", "GIF", "ICO", "JPG", "SVG", "TGA", "TIFF", "WBMP", "WEBP"],
      compressor: ["JPG Image Compress", "PNG Image Compress", "SVG Image Compress"],
      pdf: ["IMAGES TO PDF"],
    },
    pdfs: {
      document: ["DOCX", "HTML", "ODT", "RTF", "TXT", "XLSX"],
      compressor: ["PDF Document Compress"],
      ebook: ["AZW3", "EPUB", "FB2", "MOBI"],
      pdf_ebook: ["AZW3", "EPUB", "FB2", "MOBI"],
      pdf_to_image: ["JPG", "PNG", "GIF"],
    },
    audio: {
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "OGG", "OPUS", "WAV", "WMA", "3G2"],
    },
    video: {
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "MP3", "OGG", "OPUS", "WAV", "WMA", "3G2"],
      device: ["ANDROID", "BLACKBERRY", "IPAD", "IPHONE", "IPOD", "PLAYSTATION", "PSP", "WII", "XBOX"],
      video: ["3G2", "3GP", "AVI", "FLV", "MKV", "MOV", "MPG", "OGV", "WEBM", "WMV"],
      compressor: ["MP4 Video Compress"],
      webservice: ["DAILYMOTION", "FACEBOOK", "INSTAGRAM", "TELEGRAM", "TWITCH", "TWITTER", "VIBER", "VIMEO", "WHATSAPP", "YOUTUBE"],
    },
    document: ["DOCX", "PDF", "TXT", "RTF", "ODT"],
    archive: ["ZIP", "7Z"],
    ebook: ["EPUB", "MOBI", "PDF", "AZW3"],
  };

  const toggleMenu = (index: number) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) =>
        i === index ? { ...item, showMenu: !item.showMenu } : { ...item, showMenu: false }
      )
    );
  };

  const removeFile = (index: number) => {
    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));
    setErrorMessage(null);
  };

  const selectSubSection = (index: number, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedSubSection = subSection;
    updated[index].selectedFormat = "";
    setSelectedFiles(updated);
  };

  const selectFormat = (index: number, format: string, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedFormat = `${subSection}:${format}`;
    updated[index].showMenu = false;
    setSelectedFiles(updated);
  };

  const handleConvert = async () => {
    if (isConverting) return;
    if (selectedFiles.length === 0) {
      setErrorMessage("No files selected for conversion.");
      return;
    }
    if (selectedFiles.some((item) => !item.selectedFormat)) {
      setErrorMessage("Please select a format for all files.");
      return;
    }
    if (selectedFiles.length > 5) {
      setErrorMessage("Maximum 5 files allowed.");
      return;
    }
    console.log("Starting conversion for files:", selectedFiles.map(item => ({
      name: item.file.name,
      id: item.id,
      format: item.selectedFormat,
      size: item.file.size,
      type: item.file.type,
    })));
    const formData = new FormData();
    const formats = selectedFiles.map((item) => {
      const [subSection, target] = item.selectedFormat.split(':');
      return {
        name: item.file.name,
        target: target.toLowerCase().replace(' image compress', '').replace(' document compress', '').replace(' video compress', ''),
        type: item.section,
        subSection,
        id: item.id,
      };
    });
    console.log('Formats sent to backend:', JSON.stringify(formats));
    selectedFiles.forEach((item, index) => {
      console.log(`Appending file ${index + 1}: ${item.file.name} (${item.file.size} bytes)`);
      formData.append("files", item.file);
    });
    formData.append("formats", JSON.stringify(formats));
    setIsConverting(true);
    setConvertedFiles([]);
    setErrorMessage(null);
    try {
      // Pre-flight check to verify server availability
      console.log("Checking server availability at:", `${API_URL}/health`);
      const healthCheck = await fetch(`${API_URL}/health`, {
        method: "GET",
        signal: AbortSignal.timeout(5000),
      });
      if (!healthCheck.ok) {
        throw new Error(`Server health check failed with status ${healthCheck.status}`);
      }
      console.log("Server health check passed:", await healthCheck.json());

      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort(new Error("Conversion request timed out after 120 seconds"));
      }, 120000);
      const maxRetries = 3;
      let attempts = 0;
      let res: Response | null = null;
      while (attempts < maxRetries) {
        try {
          console.log("Sending fetch request to:", `${API_URL}/api/convert`);
          res = await fetch(`${API_URL}/api/convert`, {
            method: "POST",
            body: formData,
            signal: controller.signal,
          });
          break;
        } catch (err) {
          attempts++;
          if (attempts === maxRetries || err.name === 'AbortError') {
            throw err;
          }
          console.warn(`Fetch attempt ${attempts} failed: ${err.message}. Retrying in ${1000 * attempts}ms...`);
          await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
        }
      }
      clearTimeout(timeoutId);
      if (!res || !res.ok) {
        const errorData = res ? await res.text() : 'No response from server';
        throw new Error(`Conversion failed with status ${res?.status || 'unknown'}: ${errorData}`);
      }
      const data = await res.json();
      console.log("Conversion response:", data);
      const converted = await Promise.all(
        data.files.map(async (file: { name: string; path: string; id: string }, index: number) => {
          try {
            console.log(`Fetching converted file: ${file.name} from ${API_URL}${file.path} (ID: ${file.id})`);
            const maxFetchRetries = 3;
            let fetchAttempts = 0;
            while (fetchAttempts < maxFetchRetries) {
              try {
                const fileRes = await fetch(`${API_URL}${file.path}`, {
                  headers: { 'Accept': 'application/octet-stream' },
                });
                if (!fileRes.ok) {
                  const errorText = await fileRes.text();
                  throw new Error(`Failed to fetch ${file.path}: Status ${fileRes.status}, Response: ${errorText}`);
                }
                const blob = await fileRes.blob();
                const url = window.URL.createObjectURL(blob);
                return { name: file.name, url, loading: false, originalId: file.id };
              } catch (err) {
                fetchAttempts++;
                if (fetchAttempts === maxFetchRetries) {
                  console.error(`Error fetching file ${file.name} after ${maxFetchRetries} attempts:`, err);
                  return null;
                }
                await new Promise(resolve => setTimeout(resolve, 1000 * fetchAttempts));
              }
            }
          } catch (err) {
            console.error(`Error fetching file ${file.name}:`, err);
            return null;
          }
        })
      );
      const validConverted = converted.filter(file => file !== null) as ConvertedFile[];
      console.log("Converted files set:", validConverted);
      setConvertedFiles(validConverted);
      if (converted.some(file => file === null)) {
        setErrorMessage("Some files failed to convert or download. Please check file formats or try again.");
      } else if (validConverted.length === 0) {
        setErrorMessage("No files were converted successfully. Check file formats and try again.");
      } else {
        console.log("Conversion successful, files:", validConverted);
      }
    } catch (err) {
      const msg = err instanceof Error ? err.message : "Unknown error during conversion";
      console.error("Conversion error details:", {
        message: msg,
        name: err.name,
        stack: err.stack,
        API_URL,
        formDataFiles: selectedFiles.map(item => ({ name: item.file.name, size: item.file.size, type: item.file.type })),
        formats: JSON.stringify(formats),
      });
      setErrorMessage(
        msg.includes("timeout") ? "Conversion timed out after 120 seconds. Try smaller files or check server status." :
        msg.includes("health check") ? "Server is not responding. Ensure the backend is running at http://localhost:5001." :
        msg.includes("NetworkError") || msg.includes("Failed to fetch") ? "Network error: Unable to reach the server. Check your connection, CORS settings, or server status." :
        `Conversion failed: ${msg}. Please check file formats or try again.`
      );
    } finally {
      setIsConverting(false);
    }
  };

  const handleDownload = async (url: string, name: string, index: number) => {
    setConvertedFiles(prev =>
      prev.map((file, i) => (i === index ? { ...file, loading: true } : file))
    );
    try {
      const a = document.createElement("a");
      a.href = url;
      a.download = name;
      a.click();
      console.log(`Downloaded file: ${name}`);
      await fetch(`${API_URL}/api/delete/${name}`, { method: 'DELETE' });
    } catch (err) {
      console.error(`Error downloading file ${name}:`, err);
      setErrorMessage(`Failed to download ${name}. Please try again.`);
    } finally {
      setConvertedFiles(prev =>
        prev.map((file, i) => (i === index ? { ...file, loading: false } : file))
      );
    }
  };

  return (
    <div>
      <div className="flex items-center justify-center">
        <div className="flex flex-col items-center justify-center space-y-2 converter-wrapper tall p-12 m-4 rounded-md">
          <div className="bg-red-500 text-white relative gap-4 rounded-md px-8 py-6 flex items-center space-x-6 shadow-md w-[50%] justify-center">
            <span className="font-semibold text-[15px]">Choose Files</span>
            <FaFolderOpen
              onClick={handleLocalFileClick}
              title="Upload from device"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <input
              ref={fileInputRef}
              type="file"
              multiple
              onChange={handleLocalFileChange}
              style={{ display: "none" }}
              accept=".mp3,.wav,.aac,.flac,.ogg,.opus,.wma,.aiff,.m4v,.mmf,.3g2,.mp4,.avi,.mov,.webm,.mkv,.flv,.wmv,.3gp,.mpg,.ogv,.png,.jpg,.jpeg,.webp,.svg,.bmp,.gif,.ico,.tga,.tiff,.wbmp,.pdf,.doc,.docx,.txt,.rtf,.odt,.html,.ppt,.pptx,.xlsx,.zip,.7z,.epub,.mobi,.azw3,.fb2,.lit,.lrf,.pdb,.tcr"
            />
            <FaDropbox
              onClick={handleDropboxUpload}
              title="Upload from Dropbox"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <FaGoogleDrive
              onClick={handleGoogleDriveUpload}
              title="Upload from Google Drive"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
          </div>
          <div className="dropboxfoot mt-5 text-sm text-gray-400">
            100 MB maximum file size and up to 5 files.
          </div>
          {errorMessage && (
            <div className="mt-4 text-red-500 text-sm font-medium">
              {errorMessage}
            </div>
          )}
          <div className="mt-6 w-full max-w-2xl space-y-3">
            {selectedFiles.map((item, index) => {
              const convertedFile = convertedFiles.find(file => file.originalId === item.id);
              console.log(`Checking match for ${item.file.name} (ID: ${item.id}):`, convertedFile ? convertedFile.name : 'No match');
              return (
                <div
                  key={item.id}
                  className="relative bg-white text-gray-700 rounded-md px-4 py-3 shadow-md border"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3 overflow-hidden">
                      <span className="text-xl">📄</span>
                      <p className="truncate max-w-[160px] text-sm font-medium">
                        {item.file.name}
                      </p>
                      <span className="text-sm text-gray-400">to</span>
                      <button
                        className="bg-gray-200 hover:bg-gray-300 text-sm rounded-md px-2 py-1"
                        onClick={() => toggleMenu(index)}
                      >
                        {item.selectedFormat.split(':')[1] || "Select format"}
                      </button>
                    </div>
                    <div className="flex items-center gap-2">
                      {convertedFile && (
                        <button
                          onClick={() =>
                            handleDownload(
                              convertedFile.url,
                              convertedFile.name,
                              convertedFiles.findIndex(file => file.originalId === item.id)
                            )
                          }
                          disabled={convertedFile.loading}
                          className="flex items-center gap-2 bg-yellow-500 text-white px-4 py-1 rounded-md text-[14px] font-semibold hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <FiDownload className="text-[16px]" />
                          {convertedFile.loading ? "Downloading..." : "Download"}
                        </button>
                      )}
                      <button
                        className="text-gray-400 hover:text-red-500 transition text-xl"
                        onClick={() => removeFile(index)}
                      >
                        ×
                      </button>
                    </div>
                  </div>
                  {item.showMenu && (
                    <div className="absolute top-full mt-2 right-12 bg-[#1f1f1f] text-white rounded-md p-4 w-[340px] shadow-xl text-sm font-medium z-50 flex">
                      <div className="flex flex-col border-r border-gray-700 pr-3 min-w-[100px]">
                        {Object.keys(formatOptions[item.section]).map((subSection) => (
                          <button
                            key={subSection}
                            className={`text-left px-2 py-1 rounded hover:bg-[#333] ${
                              item.selectedSubSection === subSection ? "text-white font-bold" : "text-gray-400"
                            }`}
                            onClick={() => selectSubSection(index, subSection)}
                          >
                            {subSection.charAt(0).toUpperCase() + subSection.slice(1).replace('_', ' ')}
                          </button>
                        ))}
                      </div>
                      <div className="flex-1 pl-4">
                        <div className="grid grid-cols-2 gap-2">
                          {formatOptions[item.section][item.selectedSubSection || Object.keys(formatOptions[item.section])[0]].map((format) => (
                            <button
                              key={format}
                              className="bg-[#333] hover:bg-red-600 transition px-3 py-2 rounded text-white text-xs"
                              onClick={() => selectFormat(index, format, item.selectedSubSection || Object.keys(formatOptions[item.section])[0])}
                            >
                              {format}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
      <div className="flex flex-col items-center justify-center space-y-2 rounded-md">
        <h1 className="text-gray-500 text-center mt-4">
          Make sure you have uploaded valid files otherwise conversion will not be correct
        </h1>
        <button
          onClick={handleConvert}
          disabled={isConverting || selectedFiles.length === 0}
          className={`flex items-center gap-2 bg-red-400 text-white px-5 py-2 rounded-md text-[15px] font-semibold mt-2 hover:bg-red-500 transition ${isConverting || selectedFiles.length === 0 ? "opacity-50 cursor-not-allowed" : ""}`}
        >
          <FiArrowRight className="text-[16px]" />
          {isConverting ? "Converting..." : "Convert files"}
        </button>
      </div>
    </div>
  );
} this is my Dropbox.tsx file 
VITE_API_URL=http://localhost:5001
VITE_GOOGLE_CLIENT_ID=866725812936-fvjl5btdg8d8s8mc03aihrvs3tmj3q6h.apps.googleusercontent.com
VITE_GOOGLE_API_KEY=AIzaSyDtxORXGl-d3mMhG4TKBGS90scPCX7JGyM
VITE_DROPBOX_APP_KEY=2434iawyecdjpxc this is my .env frontend file 

{\"name\":\"Jhol - PaagalWorld.Com.Se.mp3\",\"target\":\"flac\",\"type\":\"audio\",\"subSection\":\"audio\",\"id\":\"Jhol - PaagalWorld.Com.Se.mp3_1752672323286_34mx1uukqya\"}]"