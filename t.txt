i have backend folder in that i have converted folder then i have uploads folder then i have .env file 
PORT=5001
FRONTEND_URL=https://your-frontend-domain-on-render.com
CONVERSION_TIMEOUT=120000
ASPOS_PDF_CLIENT_ID=your-aspose-cloud-client-id
ASPOS_PDF_CLIENT_SECRET=your-aspose-cloud-client-secretw
then i have package.json file 
{
  "name": "file-converter-backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "asposepdfcloud": "^25.6.0",
    "cors": "^2.8.5",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "fluent-ffmpeg": "^2.1.3",
    "fs": "^0.0.1-security",
    "multer": "^2.0.1",
    "node-7z": "^3.0.0",
    "path": "^0.12.7",
    "sharp": "^0.34.3",
    "svgo": "^4.0.0",
    "tmp": "^0.2.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  },
  "description": ""
}
then i have server.js file 
require('dotenv').config();
const express = require('express');
const multer = require('multer');
const ffmpeg = require('fluent-ffmpeg');
const sharp = require('sharp');
const fs = require('fs');
const fsPromises = fs.promises;
const path = require('path');
const cors = require('cors');
const tmp = require('tmp');
const { exec } = require('child_process');
const sevenZip = require('node-7z');
const PdfApi = require('asposepdfcloud');

const app = express();
const port = process.env.PORT || 5000;
const conversionTimeout = parseInt(process.env.CONVERSION_TIMEOUT) || 120000;

// Configure Aspose.PDF Cloud
const pdfApi = new PdfApi(
  process.env.ASPOS_PDF_CLIENT_ID,
  process.env.ASPOS_PDF_CLIENT_SECRET,
  'https://api.aspose.cloud/v3.0'
);

// Configure CORS with frontend URL
const corsOptions = {
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  methods: ['GET', 'POST', 'DELETE'],
  allowedHeaders: ['Content-Type'],
};
app.use(cors(corsOptions));

// All supported formats
const allFormats = [
  'bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg',
  'pdf', 'docx', 'txt', 'rtf', 'odt',
  'mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma',
  'mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv',
  'zip', '7z',
  'epub', 'mobi', 'azw3'
];

// Supported formats for each conversion type
const supportedFormats = {
  image: allFormats,
  compressor: ['jpg', 'png', 'svg'],
  pdfs: allFormats,
  audio: allFormats,
  video: allFormats,
  document: allFormats,
  archive: allFormats,
  ebook: allFormats,
};

// Configure multer
const upload = multer({
  dest: 'uploads/',
  limits: { fileSize: 100 * 1024 * 1024 }, // 100MB limit
  fileFilter: (req, file, cb) => {
    const allowedExtensions = allFormats.map(ext => `.${ext.toLowerCase()}`);
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowedExtensions.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error(`Unsupported file type: ${ext}. Supported types: ${allFormats.join(', ')}`), false);
    }
  },
});

// Ensure directories exist
const uploadsDir = path.join(__dirname, 'uploads');
const convertedDir = path.join(__dirname, 'converted');

async function ensureDirectories() {
  try {
    await fsPromises.mkdir(uploadsDir, { recursive: true });
    await fsPromises.mkdir(convertedDir, { recursive: true });
  } catch (err) {
    console.error('Error creating directories:', err.message);
    throw new Error('Failed to initialize server directories.');
  }
}

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK' });
});

// Conversion route
app.post('/api/convert', upload.array('files', 5), async (req, res) => {
  console.log('Received /api/convert request');
  let tempFiles = req.files ? req.files.map(f => f.path) : [];
  try {
    await ensureDirectories();
    const files = req.files;
    let formats;
    try {
      formats = JSON.parse(req.body.formats || '[]');
    } catch (parseError) {
      console.error('Error parsing formats:', parseError.message);
      return res.status(400).json({ error: 'Invalid formats data. Please provide valid JSON.' });
    }

    if (!files || files.length === 0) {
      return res.status(400).json({ error: 'No files uploaded.' });
    }
    if (files.length > 5) {
      return res.status(400).json({ error: 'Maximum 5 files allowed.' });
    }
    if (files.length !== formats.length) {
      return res.status(400).json({
        error: `Mismatch between files (${files.length}) and formats (${formats.length})`,
      });
    }

    const outputFiles = [];
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const formatInfo = formats[i];
      const inputExt = path.extname(file.originalname).toLowerCase().slice(1) || 'unknown';
      const outputExt = formatInfo.target?.toLowerCase().split(' ')[0];

      // Validate inputs
      if (!formatInfo.type || !outputExt) {
        throw new Error('Invalid format information: type and target are required.');
      }
      if (!Object.keys(supportedFormats).includes(formatInfo.type)) {
        throw new Error(`Unsupported conversion type: ${formatInfo.type}. Supported types: ${Object.keys(supportedFormats).join(', ')}`);
      }
      if (!supportedFormats[formatInfo.type].includes(outputExt)) {
        throw new Error(`Unsupported output format: ${outputExt} for type ${formatInfo.type}. Supported formats: ${supportedFormats[formatInfo.type].join(', ')}`);
      }
      if (!allFormats.includes(inputExt)) {
        throw new Error(`Unsupported input format: ${inputExt}. Supported formats: ${allFormats.join(', ')}`);
      }

      const inputPath = path.resolve(file.path);
      const outputPath = path.resolve(
        convertedDir,
        `${path.basename(file.filename, path.extname(file.filename))}_${Date.now()}.${outputExt}`
      );

      try {
        await fsPromises.access(inputPath);
      } catch {
        throw new Error(`Input file not found: ${file.originalname}`);
      }

      const outputType = ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(outputExt) ? 'image' :
        ['pdf', 'docx', 'txt', 'rtf', 'odt'].includes(outputExt) ? 'document' :
          ['mp3', 'wav', 'aac', 'flac', 'ogg', 'opus', 'wma'].includes(outputExt) ? 'audio' :
            ['mp4', 'avi', 'mov', 'webm', 'mkv', 'flv', 'wmv'].includes(outputExt) ? 'video' :
              ['zip', '7z'].includes(outputExt) ? 'archive' :
                ['epub', 'mobi', 'azw3'].includes(outputExt) ? 'ebook' : formatInfo.type;

      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort(new Error('Conversion timed out'));
      }, conversionTimeout);

      try {
        switch (outputType) {
          case 'image':
          case 'compressor':
            await convertImage(inputPath, outputPath, outputExt);
            break;
          case 'document':
            await convertDocument(inputPath, outputPath, outputExt);
            break;
          case 'pdfs':
            await convertPdf(inputPath, outputPath, outputExt);
            break;
          case 'audio':
          case 'video':
            await convertMedia(inputPath, outputPath, outputExt);
            break;
          case 'archive':
            await convertArchive(inputPath, outputPath, outputExt);
            break;
          case 'ebook':
            await convertEbook(inputPath, outputPath, outputExt);
            break;
          default:
            throw new Error(`Unsupported conversion type: ${outputType}`);
        }
      } finally {
        clearTimeout(timeoutId);
      }

      outputFiles.push({
        path: outputPath,
        name: path.basename(outputPath),
      });
      tempFiles.push(outputPath); // Track output files
    }

    res.json({
      files: outputFiles.map(file => ({
        name: file.name,
        path: `/converted/${file.name}`,
      })),
    });
  } catch (error) {
    console.error('Conversion error:', error.message);
    res.status(500).json({ error: error.message || 'Conversion failed.' });
  } finally {
    // Cleanup only input files (uploads), keep converted files
    await cleanupFiles(tempFiles.filter(file => file.startsWith(uploadsDir)));
  }
});

// Serve converted files and delete after download
app.get('/converted/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.resolve(convertedDir, filename);
  console.log(`Serving file: ${filePath}`);
  try {
    await fsPromises.access(filePath);
    res.download(filePath, filename, async (err) => {
      if (err) {
        console.error('Error sending file:', err.message);
        res.status(500).json({ error: 'Failed to send converted file.' });
      } else {
        console.log(`File sent successfully: ${filePath}`);
        await cleanupFiles([filePath]);
      }
    });
  } catch (err) {
    console.error('File not found:', filePath, err.message);
    res.status(404).json({ error: 'Converted file not found.' });
  }
});

// Delete file endpoint
app.delete('/api/delete/:filename', async (req, res) => {
  const filename = req.params.filename;
  const filePath = path.resolve(convertedDir, filename);
  try {
    await cleanupFiles([filePath]);
    res.status(200).json({ message: `File ${filename} deleted successfully.` });
  } catch (err) {
    console.error(`Error deleting file ${filePath}:`, err.message);
    res.status(500).json({ error: `Failed to delete file ${filename}.` });
  }
});

// Conversion functions
async function convertImage(inputPath, outputPath, format) {
  const imageFormats = ['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'];
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  let tempFiles = [];

  try {
    if (!imageFormats.includes(inputExt) && ['pdf', 'docx', 'txt', 'rtf', 'odt'].includes(inputExt)) {
      const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
      tempFiles.push(tempPdfPath);
      await convertDocument(inputPath, tempPdfPath, 'pdf');
      await convertImage(tempPdfPath, outputPath, format);
      return;
    }

    if (imageFormats.includes(format)) {
      await sharp(inputPath)
        .toFormat(format)
        .toFile(outputPath);
      console.log(`Image conversion completed: ${outputPath}`);
    } else if (format === 'pdf') {
      const fileStream = fs.createReadStream(inputPath);
      const uploadResponse = await pdfApi.uploadFile(`temp_${Date.now()}.png`, fileStream);
      const result = await pdfApi.putImageInStorageToPdf(
        path.basename(outputPath),
        [uploadResponse.uploaded[0]],
        { folder: 'Temp' }
      );
      const downloadResponse = await pdfApi.downloadFile(result.filePath);
      await fsPromises.writeFile(outputPath, downloadResponse.body);
      console.log(`Image to PDF conversion completed: ${outputPath}`);
    } else if (format === 'docx') {
      const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
      tempFiles.push(tempPdfPath);
      await convertImage(inputPath, tempPdfPath, 'pdf');
      await convertPdf(tempPdfPath, outputPath, 'docx');
      console.log(`Image to DOCX conversion completed: ${outputPath}`);
    } else {
      throw new Error(`Unsupported image output format: ${format}`);
    }
  } catch (err) {
    console.error(`Image conversion error: ${err.message}`);
    throw new Error(`Image conversion failed: ${err.message}`);
  } finally {
    await cleanupFiles(tempFiles);
  }
}

async function convertPdf(inputPath, outputPath, format) {
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  let tempFiles = [];

  try {
    if (inputExt !== 'pdf') {
      const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
      tempFiles.push(tempPdfPath);
      await convertDocument(inputPath, tempPdfPath, 'pdf');
      await convertPdf(tempPdfPath, outputPath, format);
      return;
    }

    const fileStream = fs.createReadStream(inputPath);
    const uploadResponse = await pdfApi.uploadFile(`temp_${Date.now()}.pdf`, fileStream);

    if (['jpg', 'png', 'gif'].includes(format)) {
      const result = await pdfApi.putPdfInStorageToImage(
        uploadResponse.uploaded[0],
        format.toUpperCase(),
        { folder: 'Temp' }
      );
      const downloadResponse = await pdfApi.downloadFile(result.images[0].pathName);
      await fsPromises.writeFile(outputPath, downloadResponse.body);
      console.log(`PDF to ${format} conversion completed: ${outputPath}`);
    } else if (format === 'docx') {
      const result = await pdfApi.putPdfInStorageToDoc(
        uploadResponse.uploaded[0],
        'DocX',
        { folder: 'Temp' }
      );
      const downloadResponse = await pdfApi.downloadFile(result.fileName);
      await fsPromises.writeFile(outputPath, downloadResponse.body);
      console.log(`PDF to DOCX conversion completed: ${outputPath}`);
    } else {
      throw new Error(`Unsupported PDF output format: ${format}`);
    }
  } catch (err) {
    console.error(`PDF conversion error: ${err.message}`);
    throw new Error(`PDF conversion failed: ${err.message}`);
  } finally {
    await cleanupFiles(tempFiles);
  }
}

async function convertDocument(inputPath, outputPath, format) {
  const inputExt = path.extname(inputPath).toLowerCase().slice(1);
  const supportedDocumentFormats = ['docx', 'pdf', 'txt', 'rtf', 'odt'];
  let tempFiles = [];

  try {
    if (!supportedDocumentFormats.includes(format)) {
      throw new Error(`Unsupported output document format: ${format}`);
    }

    if (inputExt === 'pdf') {
      await convertPdf(inputPath, outputPath, format);
      return;
    }

    if (['bmp', 'eps', 'gif', 'ico', 'png', 'svg', 'tga', 'tiff', 'wbmp', 'webp', 'jpg', 'jpeg'].includes(inputExt)) {
      const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
      tempFiles.push(tempPdfPath);
      await convertImage(inputPath, tempPdfPath, 'pdf');
      await convertPdf(tempPdfPath, outputPath, format);
      return;
    }

    // For non-PDF document inputs, convert to PDF using Calibre, then to target format
    if (['docx', 'txt', 'rtf', 'odt'].includes(inputExt)) {
      const tempPdfPath = path.join(convertedDir, `temp_${Date.now()}.pdf`);
      tempFiles.push(tempPdfPath);
      await convertEbook(inputPath, tempPdfPath, 'pdf');
      await convertPdf(tempPdfPath, outputPath, format);
    } else {
      throw new Error(`Unsupported document input format: ${inputExt}`);
    }
    console.log(`Document conversion completed: ${outputPath}`);
  } catch (err) {
    console.error(`Document conversion error: ${err.message}`);
    throw new Error(`Document conversion failed: ${err.message}`);
  } finally {
    await cleanupFiles(tempFiles);
  }
}

async function convertMedia(inputPath, outputPath, format) {
  return new Promise((resolve, reject) => {
    ffmpeg(inputPath)
      .toFormat(format)
      .on('end', () => {
        console.log(`Media conversion completed: ${outputPath}`);
        resolve();
      })
      .on('error', (err) => {
        console.error(`Media conversion error: ${err.message}`);
        reject(new Error(`Media conversion failed: ${err.message}`));
      })
      .save(outputPath);
  });
}

async function convertArchive(inputPath, outputPath, format) {
  if (format === 'zip' || format === '7z') {
    return new Promise((resolve, reject) => {
      sevenZip.add(outputPath, inputPath, { $raw: { '-t': format } })
        .on('end', () => {
          console.log(`Archive conversion completed: ${outputPath}`);
          resolve();
        })
        .on('error', (err) => {
          console.error(`Archive conversion error: ${err.message}`);
          reject(new Error(`Archive conversion failed: ${err.message}`));
        });
    });
  } else {
    throw new Error(`Unsupported archive format: ${format}`);
  }
}

async function convertEbook(inputPath, outputPath, format) {
  return new Promise((resolve, reject) => {
    exec(`ebook-convert "${inputPath}" "${outputPath}"`, (err) => {
      if (err) {
        console.error(`Ebook conversion error: ${err.message}`);
        return reject(new Error(`Ebook conversion failed: ${err.message}`));
      }
      console.log(`Ebook conversion completed: ${outputPath}`);
      resolve();
    });
  });
}

async function cleanupFiles(filePaths) {
  const maxRetries = 3;
  const retryDelay = 1000; // 1 second
  for (const filePath of filePaths) {
    let attempts = 0;
    while (attempts < maxRetries) {
      try {
        await fsPromises.access(filePath);
        await fsPromises.unlink(filePath);
        console.log(`Deleted file: ${filePath}`);
        break;
      } catch (err) {
        if (err.code === 'ENOENT') {
          console.log(`File already deleted or does not exist: ${filePath}`);
          break;
        } else if (err.code === 'EPERM') {
          attempts++;
          console.warn(`EPERM error on attempt ${attempts} for ${filePath}. Retrying in ${retryDelay}ms...`);
          await new Promise(resolve => setTimeout(resolve, retryDelay));
          if (attempts === maxRetries) {
            console.error(`Failed to delete file ${filePath} after ${maxRetries} attempts: ${err.message}`);
          }
        } else {
          console.error(`Error deleting file ${filePath}: ${err.message}`);
          break;
        }
      }
    }
  }
}

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err.message);
  res.status(500).json({ error: 'Internal server error.' });
});

// Start server
async function startServer() {
  try {
    await ensureDirectories();
    app.listen(port, () => {
      console.log(`Server running on http://localhost:${port}`);
    });
  } catch (err) {
    console.error('Failed to start server:', err.message);
    process.exit(1);
  }
}

startServer();
this is my backened code 
then i have frontend folder in that i have src folder in that i have components folder in that i have Dropbox.tsx file 
import React, { useEffect, useRef, useState } from "react";
import { FaFolderOpen, FaDropbox, FaGoogleDrive } from "react-icons/fa";
import { FiArrowRight, FiDownload } from "react-icons/fi";

declare global {
  interface Window {
    Dropbox: any;
    gapi: any;
    google: any;
    onApiLoad?: () => void;
  }
}

interface FileItem {
  file: File;
  showMenu: boolean;
  section: keyof FormatOptions;
  selectedFormat: string;
  source: string;
  url: string;
  id: string;
  selectedSubSection?: string;
}

interface FormatOptions {
  image: {
    image: string[];
    compressor: string[];
    pdf: string[];
  };
  pdfs: {
    document: string[];
    compressor: string[];
    ebook: string[];
    pdf_ebook: string[];
    pdf_to_image: string[];
  };
  audio: {
    audio: string[];
  };
  video: {
    audio: string[];
    device: string[];
    video: string[];
    compressor: string[];
    webservice: string[];
  };
  document: string[];
  archive: string[];
  ebook: string[];
}

interface ConvertedFile {
  name: string;
  url: string;
  loading: boolean;
  converting: boolean;
  originalId: string;
}

export default function Dropbox() {
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || "";
  const GOOGLE_API_KEY = import.meta.env.VITE_GOOGLE_API_KEY || "";
  const DROPBOX_APP_KEY = import.meta.env.VITE_DROPBOX_APP_KEY || "";
  const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000";

  const fileInputRef = useRef<HTMLInputElement>(null);
  const pickerLoaded = useRef(false);
  const [selectedFiles, setSelectedFiles] = useState<FileItem[]>([]);
  const [isConverting, setIsConverting] = useState(false);
  const [convertedFiles, setConvertedFiles] = useState<ConvertedFile[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  // Load Google APIs and Dropbox SDK
  useEffect(() => {
    const loadGapiAndGis = () => {
      const gapiScript = document.createElement("script");
      gapiScript.src = "https://apis.google.com/js/api.js";
      gapiScript.async = true;
      gapiScript.onload = () => {
        window.gapi.load("client:picker", async () => {
          try {
            await window.gapi.client.init({
              apiKey: GOOGLE_API_KEY,
              discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"],
            });
            pickerLoaded.current = true;
            console.log("Google API client initialized");
          } catch (err) {
            console.error("Failed to init gapi client:", err);
            setErrorMessage("Failed to initialize Google API client. Please try again later.");
          }
        });
      };
      gapiScript.onerror = () => {
        setErrorMessage("Failed to load Google API script.");
      };
      document.body.appendChild(gapiScript);

      const gisScript = document.createElement("script");
      gisScript.src = "https://accounts.google.com/gsi/client";
      gisScript.async = true;
      gisScript.onload = () => {
        console.log("Google Identity Services loaded");
      };
      gisScript.onerror = () => {
        setErrorMessage("Failed to load Google Identity Services script.");
      };
      document.body.appendChild(gisScript);

      const dropboxScript = document.createElement("script");
      dropboxScript.src = "https://www.dropbox.com/static/api/2/dropins.js";
      dropboxScript.id = "dropboxjs";
      dropboxScript.setAttribute("data-app-key", DROPBOX_APP_KEY);
      dropboxScript.async = true;
      dropboxScript.onerror = () => {
        setErrorMessage("Failed to load Dropbox SDK.");
      };
      document.body.appendChild(dropboxScript);
    };

    loadGapiAndGis();
  }, [GOOGLE_API_KEY, DROPBOX_APP_KEY]);

  // Map file extension to format section
  const getFormatSection = (ext: string): keyof FormatOptions => {
    ext = ext.toLowerCase();
    if (ext === "pdf") return "pdfs";
    if (["bmp", "eps", "gif", "ico", "png", "svg", "tga", "tiff", "wbmp", "webp", "jpg", "jpeg"].includes(ext))
      return "image";
    if (["doc", "docx", "txt", "rtf", "odt", "html", "ppt", "pptx", "xlsx"].includes(ext)) return "document";
    if (["mp3", "wav", "aac", "flac", "ogg", "opus", "wma", "aiff", "m4v", "mmf", "3g2"].includes(ext))
      return "audio";
    if (["mp4", "avi", "mov", "webm", "mkv", "flv", "wmv", "3gp", "mpg", "ogv"].includes(ext)) return "video";
    if (["zip", "7z"].includes(ext)) return "archive";
    if (["epub", "mobi", "azw3", "fb2", "lit", "lrf", "pdb", "tcr"].includes(ext)) return "ebook";
    return "image"; // Default fallback
  };

  // Format options configuration
  const formatOptions: FormatOptions = {
    image: {
      image: ["BMP", "EPS", "GIF", "ICO", "JPG", "PNG", "SVG", "TGA", "TIFF", "WBMP", "WEBP"],
      compressor: ["JPG", "PNG", "SVG"],
      pdf: ["PDF"],
    },
    pdfs: {
      document: ["DOCX", "TXT", "RTF", "ODT"],
      compressor: ["PDF"],
      ebook: ["EPUB", "MOBI", "AZW3"],
      pdf_ebook: ["EPUB", "MOBI", "AZW3"],
      pdf_to_image: ["JPG", "PNG", "GIF"],
    },
    audio: {
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "OGG", "OPUS", "WAV", "WMA", "3G2"],
    },
    video: {
      video: ["3G2", "3GP", "AVI", "FLV", "MKV", "MOV", "MPG", "OGV", "WEBM", "WMV"],
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "MP3", "OGG", "OPUS", "WAV", "WMA", "3G2"],
      device: ["ANDROID", "BLACKBERRY", "IPAD", "IPHONE", "IPOD", "PLAYSTATION", "PSP", "WII", "XBOX"],
      compressor: ["MP4"],
      webservice: ["DAILYMOTION", "FACEBOOK", "INSTAGRAM", "TELEGRAM", "TWITCH", "TWITTER", "VIBER", "VIMEO", "WHATSAPP", "YOUTUBE"],
    },
    document: ["DOCX", "PDF", "TXT", "RTF", "ODT"],
    archive: ["ZIP", "7Z"],
    ebook: ["EPUB", "MOBI", "AZW3"],
  };

  // Trigger Google Drive Picker
  const handleGoogleDriveUpload = () => {
    if (!pickerLoaded.current) {
      setErrorMessage("Google Picker is not ready. Please try again shortly.");
      return;
    }
    triggerGoogleSignIn();
  };

  // Initialize Google Sign-In
  const triggerGoogleSignIn = () => {
    if (!window.google?.accounts?.oauth2) {
      setErrorMessage("Google Identity Services not loaded. Please try again.");
      return;
    }

    const tokenClient = window.google.accounts.oauth2.initTokenClient({
      client_id: GOOGLE_CLIENT_ID,
      scope: "https://www.googleapis.com/auth/drive.readonly",
      callback: (response: any) => {
        if (response?.access_token) {
          console.log("Received access token:", response.access_token);
          setAccessToken(response.access_token);
          createGooglePicker(response.access_token);
        } else {
          console.error("No access token returned:", response);
          setErrorMessage("Google Sign-in failed: No access token received.");
        }
      },
    });

    tokenClient.requestAccessToken();
  };

  // Create Google Picker
  const createGooglePicker = (token: string) => {
    if (pickerLoaded.current && window.google?.picker && typeof window.google.picker.PickerBuilder === "function") {
      try {
        const view = new window.google.picker.View(window.google.picker.ViewId.DOCS);
        const picker = new window.google.picker.PickerBuilder()
          .addView(view)
          .setOAuthToken(token)
          .setDeveloperKey(GOOGLE_API_KEY)
          .setOrigin(window.location.origin)
          .setCallback((data: any) => handlePickerResponse(data, token))
          .build();
        picker.setVisible(true);
      } catch (err) {
        console.error("Failed to create Google Picker:", err);
        setErrorMessage("Failed to initialize Google Picker. Please try again.");
      }
    } else {
      setErrorMessage("Google Picker API not loaded. Please try again.");
    }
  };

  // Handle Google Picker response
  const handlePickerResponse = async (data: any, token: string) => {
    if (data.action === window.google.picker.Action.PICKED) {
      const docs = data.docs;
      if (selectedFiles.length + docs.length > 5) {
        setErrorMessage("Maximum 5 files allowed.");
        return;
      }

      if (!token) {
        setErrorMessage("Access token missing. Please sign in again.");
        triggerGoogleSignIn();
        return;
      }

      const newFiles = await Promise.all(
        docs.map(async (doc: any) => {
          try {
            const response = await fetch(
              `https://www.googleapis.com/drive/v3/files/${doc.id}?alt=media`,
              {
                headers: { Authorization: `Bearer ${token}` },
              }
            );
            if (!response.ok) {
              const errorData = await response.json();
              console.error("API error details:", errorData);
              if (response.status === 401) {
                setErrorMessage("Unauthorized access. Please sign in again.");
                setAccessToken(null);
                triggerGoogleSignIn();
                return null;
              }
              throw new Error(`Failed to fetch file: ${response.status}, ${errorData.error?.message}`);
            }
            const blob = await response.blob();
            const ext = doc.name.split(".").pop()?.toLowerCase() || "bin";
            const section = getFormatSection(ext);
            return {
              file: new File([blob], doc.name, { type: blob.type }),
              showMenu: false,
              section: section as keyof FormatOptions,
              selectedFormat: "",
              source: "google",
              url: doc.url,
              id: `${doc.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
            };
          } catch (err) {
            console.error("Failed to fetch Google Drive file", doc.name, err);
            return null;
          }
        })
      );

      const validFiles = newFiles.filter((f): f is FileItem => f !== null);
      setSelectedFiles((prev) => [...prev, ...validFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
    }
  };

  // Handle local file upload
  const handleLocalFileClick = () => fileInputRef.current?.click();

  const handleLocalFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      if (selectedFiles.length + files.length > 5) {
        setErrorMessage("Maximum 5 files allowed.");
        return;
      }
      const newFiles = Array.from(files).map((f) => {
        const ext = f.name.split(".").pop()?.toLowerCase() || "";
        const section = getFormatSection(ext);
        return {
          file: f,
          showMenu: false,
          section: section as keyof FormatOptions,
          selectedFormat: "",
          source: "local",
          id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
        };
      });
      setSelectedFiles((prev) => [...prev, ...newFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };

  // Handle Dropbox upload
  const handleDropboxUpload = () => {
    if (!window.Dropbox) {
      setErrorMessage("Dropbox SDK not loaded. Please ensure the Dropbox script is included.");
      return;
    }
    window.Dropbox.choose({
      linkType: "direct",
      multiselect: true,
      extensions: [
        ".mp3", ".wav", ".aac", ".flac", ".ogg", ".opus", ".wma", ".aiff", ".m4v", ".mmf", ".3g2",
        ".mp4", ".avi", ".mov", ".webm", ".mkv", ".flv", ".wmv", ".3gp", ".mpg", ".ogv",
        ".png", ".jpg", ".jpeg", ".webp", ".svg", ".bmp", ".gif", ".ico", ".tga", ".tiff", ".wbmp",
        ".pdf", ".doc", ".docx", ".txt", ".rtf", ".odt", ".html", ".ppt", ".pptx", ".xlsx",
        ".zip", ".7z",
        ".epub", ".mobi", ".azw3", ".fb2", ".lit", ".lrf", ".pdb", ".tcr",
      ],
      success: async (files: any[]) => {
        if (selectedFiles.length + files.length > 5) {
          setErrorMessage("Maximum 5 files allowed.");
          return;
        }
        const newFiles = await Promise.all(
          files.map(async (f) => {
            try {
              const response = await fetch(f.link);
              if (!response.ok) throw new Error(`Failed to fetch Dropbox file: ${f.name}`);
              const blob = await response.blob();
              const ext = f.name.split(".").pop()?.toLowerCase() || "";
              const section = getFormatSection(ext);
              return {
                file: new File([blob], f.name, { type: blob.type }),
                showMenu: false,
                section: section as keyof FormatOptions,
                selectedFormat: "",
                source: "dropbox",
                url: f.link,
                id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
              };
            } catch (err) {
              console.error(`Error fetching Dropbox file ${f.name}:`, err);
              return null;
            }
          })
        );
        const validFiles = newFiles.filter((f): f is FileItem => f !== null);
        setSelectedFiles((prev) => [...prev, ...validFiles]);
        setConvertedFiles([]);
        setErrorMessage(null);
      },
      error: (err: any) => {
        console.error("Dropbox picker error:", err);
        setErrorMessage("Failed to load files from Dropbox. Please try again.");
      },
    });
  };

  // Toggle format selection menu
  const toggleMenu = (index: number) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) =>
        i === index ? { ...item, showMenu: !item.showMenu } : { ...item, showMenu: false }
      )
    );
  };

  // Remove a selected file
  const removeFile = (index: number) => {
    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));
    setErrorMessage(null);
  };

  // Select a subsection for format options
  const selectSubSection = (index: number, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedSubSection = subSection;
    updated[index].selectedFormat = "";
    setSelectedFiles(updated);
  };

  // Select a format for conversion
  const selectFormat = (index: number, format: string, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedFormat = `${subSection}:${format}`;
    updated[index].showMenu = false;
    setSelectedFiles(updated);
  };

  // Handle file conversion
  const handleConvert = async () => {
    if (isConverting) return;
    if (selectedFiles.length === 0) {
      setErrorMessage("No files selected for conversion.");
      return;
    }

    if (selectedFiles.some((item) => !item.selectedFormat)) {
      setErrorMessage("Please select a format for all files.");
      return;
    }

    if (selectedFiles.length > 5) {
      setErrorMessage("Maximum 5 files allowed.");
      return;
    }

    console.log("Starting conversion for files:", selectedFiles.map((item) => ({
      name: item.file.name,
      id: item.id,
      format: item.selectedFormat,
    })));

    const formData = new FormData();
    const formats = selectedFiles.map((item) => {
      const [subSection, target] = item.selectedFormat.split(":");
      return {
        name: item.file.name,
        target: target.toLowerCase(),
        type: item.section,
        subSection,
        id: item.id,
      };
    });

    setConvertedFiles(
      formats.map((format) => ({
        name: format.name,
        url: "",
        loading: false,
        converting: true,
        originalId: format.id,
      }))
    );

    selectedFiles.forEach((item) => {
      formData.append("files", item.file);
    });
    formData.append("formats", JSON.stringify(formats));

    setIsConverting(true);
    setErrorMessage(null);

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort(new Error("Conversion request timed out after 120 seconds"));
      }, 120000);

      const res = await fetch(`${API_URL}/api/convert`, {
        method: "POST",
        body: formData,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || `Conversion failed with status ${res.status}`);
      }

      const data = await res.json();
      console.log("Conversion response:", data);

      const converted = await Promise.all(
        data.files.map(async (file: { name: string; path: string }, index: number) => {
          try {
            console.log(`Fetching converted file: ${file.name} from ${API_URL}${file.path}`);
            const fileRes = await fetch(`${API_URL}${file.path}`);
            if (!fileRes.ok) {
              throw new Error(`Failed to fetch converted file: ${file.name}, status: ${fileRes.status}`);
            }
            const blob = await fileRes.blob();
            const url = window.URL.createObjectURL(blob);
            const originalId = formats[index].id;
            return { name: file.name, url, loading: false, converting: false, originalId };
          } catch (err) {
            console.error(`Error fetching file ${file.name}:`, err);
            return null;
          }
        })
      );

      const validConverted = converted.filter((file): file is ConvertedFile => file !== null);
      console.log("Converted files set:", validConverted);
      setConvertedFiles(validConverted);
      if (converted.some((file) => file === null)) {
        setErrorMessage("Some files failed to convert or download. Please check file formats and try again.");
      } else if (validConverted.length === 0) {
        setErrorMessage("No files were converted successfully. Check file formats and try again.");
      } else {
        console.log("Conversion successful, files:", validConverted);
      }
    } catch (err) {
      const msg = err instanceof Error ? err.message : "Unknown error during conversion";
      console.error("Conversion error details:", {
        message: msg,
        name: err.name,
        stack: err.stack,
      });
      setErrorMessage(
        msg.includes("timeout")
          ? "Conversion timed out after 120 seconds. Try smaller files or check server status."
          : `Conversion failed: ${msg}`
      );
      setConvertedFiles((prev) =>
        prev.map((file) => ({ ...file, converting: false }))
      );
    } finally {
      setIsConverting(false);
    }
  };

  // Handle file download
  const handleDownload = async (url: string, name: string, index: number) => {
    setConvertedFiles((prev) =>
      prev.map((file, i) => (i === index ? { ...file, loading: true } : file))
    );
    try {
      const a = document.createElement("a");
      a.href = url;
      a.download = name;
      a.click();
      console.log(`Downloaded file: ${name}`);
    } catch (err) {
      console.error(`Error downloading file ${name}:`, err);
      setErrorMessage(`Failed to download ${name}. Please try again.`);
    } finally {
      setConvertedFiles((prev) =>
        prev.map((file, i) => (i === index ? { ...file, loading: false } : file))
      );
    }
  };

  return (
    <div>
      <div className="flex items-center justify-center">
        <div className="flex flex-col items-center justify-center space-y-2 converter-wrapper pt-10 m-4 rounded-md bg-white shadow-lg w-full max-w-3xl">
          <div className="bg-red-500 text-white gap-4 rounded-md px-8 py-6 flex items-center space-x-6 shadow-md w-[50%] justify-center">
            <span className="font-semibold text-[15px]">Choose Files</span>
            <FaFolderOpen
              onClick={handleLocalFileClick}
              title="Upload from device"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <input
              ref={fileInputRef}
              type="file"
              multiple
              onChange={handleLocalFileChange}
              style={{ display: "none" }}
              accept=".mp3,.wav,.aac,.flac,.ogg,.opus,.wma,.aiff,.m4v,.mmf,.3g2,.mp4,.avi,.mov,.webm,.mkv,.flv,.wmv,.3gp,.mpg,.ogv,.png,.jpg,.jpeg,.webp,.svg,.bmp,.gif,.ico,.tga,.tiff,.wbmp,.pdf,.doc,.docx,.txt,.rtf,.odt,.html,.ppt,.pptx,.xlsx,.zip,.7z,.epub,.mobi,.azw3,.fb2,.lit,.lrf,.pdb,.tcr"
            />
            <FaDropbox
              onClick={handleDropboxUpload}
              title="Upload from Dropbox"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <FaGoogleDrive
              onClick={handleGoogleDriveUpload}
              title="Upload from Google Drive"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
          </div>
          <div className="dropboxfoot mt-3 text-sm text-gray-400">
            100 MB maximum file size and up to 5 files.
          </div>
          {errorMessage && (
            <div className="mt-4 text-red-500 text-sm font-medium">{errorMessage}</div>
          )}
          <div className="mt-6 w-full max-w-2xl space-y-3">
            {selectedFiles.map((item, index) => {
              const convertedFile = convertedFiles.find((file) => file.originalId === item.id);
              console.log(
                `Checking match for ${item.file.name} (ID: ${item.id}):`,
                convertedFile ? convertedFile.name : "No match"
              );
              return (
                <div
                  key={item.id}
                  className="relative bg-white text-gray-700 rounded-md px-4 py-3 shadow-md border mb-2"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3 overflow-hidden">
                      {convertedFile?.converting ? (
                        <div className="flex items-center gap-2">
                          <div className="w-5 h-5 border-2 border-t-2 border-gray-300 border-t-red-500 rounded-full animate-spin"></div>
                          <span className="text-sm text-gray-400" aria-live="polite">Converting...</span>
                        </div>
                      ) : (
                        <span className="text-xl">📄</span>
                      )}
                      <p className="truncate max-w-[160px] text-sm font-medium">{item.file.name}</p>
                      <span className="text-sm text-gray-400">to</span>
                      <button
                        className="bg-gray-200 hover:bg-gray-300 text-sm rounded-md px-2 py-1"
                        onClick={() => toggleMenu(index)}
                        disabled={convertedFile?.converting}
                      >
                        {item.selectedFormat.split(":")[1] || "Select format"}
                      </button>
                    </div>
                    <div className="flex items-center gap-2">
                      {convertedFile && !convertedFile.converting && (
                        <button
                          onClick={() =>
                            handleDownload(
                              convertedFile.url,
                              convertedFile.name,
                              convertedFiles.findIndex((file) => file.originalId === item.id)
                            )
                          }
                          disabled={convertedFile.loading}
                          className="flex items-center gap-2 bg-yellow-500 text-white px-4 py-1 rounded-md text-[14pt] font-semibold hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <FiDownload className="text-[16px]" />
                          {convertedFile.loading ? "Downloading..." : "Download"}
                        </button>
                      )}
                      <button
                        className="text-gray-400 hover:text-red-500 transition text-xl"
                        onClick={() => removeFile(index)}
                        disabled={convertedFile?.converting}
                      >
                        ×
                      </button>
                    </div>
                  </div>
                  {item.showMenu && (
                    <div className="absolute top-full mt-2 right-12 bg-[#1f1f1f] text-white rounded-md p-4 w-[340px] shadow-xl text-sm font-medium z-50 flex">
                      <div className="flex flex-col border-r border-gray-700 pr-3 min-w-[100px]">
                        {Object.keys(formatOptions[item.section]).map((subSection) => (
                          <button
                            key={subSection}
                            className={`text-left px-2 py-1 rounded hover:bg-[#333] ${item.selectedSubSection === subSection ? "text-white font-bold" : "text-gray-400"
                              }`}
                            onClick={() => selectSubSection(index, subSection)}
                          >
                            {subSection.charAt(0).toUpperCase() + subSection.slice(1).replace("_", " ")}
                          </button>
                        ))}
                      </div>
                      <div className="flex-1 pl-4">
                        <div className="grid grid-cols-2 gap-2">
                          {formatOptions[item.section][
                            item.selectedSubSection || Object.keys(formatOptions[item.section])[0]
                          ].map((format) => (
                            <button
                              key={format}
                              className="bg-[#333] hover:bg-red-600 transition px-3 py-2 rounded text-white text-xs"
                              onClick={() =>
                                selectFormat(
                                  index,
                                  format,
                                  item.selectedSubSection || Object.keys(formatOptions[item.section])[0]
                                )
                              }
                            >
                              {format}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
      <div className="flex flex-col items-center justify-center space-y-2 rounded-md">
        <h1 className="text-gray-500 text-center mt-4">
          Make sure you have uploaded valid files otherwise conversion will not be correct
        </h1>
        <button
          onClick={handleConvert}
          disabled={isConverting || selectedFiles.length === 0}
          className={`flex items-center gap-2 bg-red-400 text-white px-5 py-2 rounded-md text-[15px] font-semibold mt-2 hover:bg-red-500 transition ${isConverting || selectedFiles.length === 0 ? "opacity-50 cursor-not-allowed" : ""
            }`}
        >
          <FiArrowRight className="text-[16px]" />
          {isConverting ? "Converting..." : "Convert files"}
        </button>
      </div>
    </div>
  );
}
then i have .env file 
VITE_GOOGLE_CLIENT_ID=866725812936-fvjl5btdg8d8s8mc03aihrvs3tmj3q6h.apps.googleusercontent.com
VITE_GOOGLE_API_KEY=AIzaSyDtxORXGl-d3mMhG4TKBGS90scPCX7JGyM
VITE_DROPBOX_APP_KEY=2434iawyecdjpxc
VITE_API_URL=https://nion-rqsx.onrender.com

and i am runing frontend localhost:5173 not i deplot live  and  1) image section - BMP , EPS , ico , svg , tga , wbmp 
 2) compressor section  - svg
3) pdf section - pdf to img,pdf to word 

4) audio - aac , aiff , m4v ,mmf  , wma ,  3g2
for this i wnat to use npm package what i make which functionality easily and give me full code 