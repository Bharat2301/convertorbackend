i have backend folder in that i have converted folder then i have uploads folder then i have .env file 
PORT=5001
FRONTEND_URL=https://your-frontend-domain-on-render.com
CONVERSION_TIMEOUT=120000

then i have package.json file 
{
  "name": "file-converter-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "multi-format-converter": "^1.0.0",
    "pdf-parse": "^1.1.1",
    "tmp": "^0.2.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.7"
  },
  "description": ""
}

then i have render.yaml file 
services:
  - type: web
    name: file-converter-backend
    env: node
    plan: free
    buildCommand: npm install
    startCommand: node server.js
    envVars:
      - key: NODE_VERSION
        value: 22.16.0
      - key: PORT
        value: 5001
      - key: FRONTEND_URL
        value: https://your-frontend-domain-on-render.com
      - key: CONVERSION_TIMEOUT
        value: 120000
    preDeployCommand: |
      apt-get update && apt-get install -y ffmpeg libvips-dev poppler-utils
      then i have frontend folder in that i have src folder in that i have components folder in that i have Dropbox.tsx file 
      import React, { useEffect, useRef, useState } from 'react';
import { FaFolderOpen, FaDropbox, FaGoogleDrive } from 'react-icons/fa';
import { FiArrowRight, FiDownload } from 'react-icons/fi';

// Define interfaces for external APIs
interface GooglePickerResponse {
  action: string;
  docs: Array<{ id: string; name: string; url: string }>;
}

interface DropboxFile {
  name: string;
  link: string;
}

declare global {
  interface Window {
    Dropbox?: {
      choose: (options: {
        linkType: string;
        multiselect: boolean;
        extensions: string[];
        success: (files: DropboxFile[]) => void;
        error: (error: unknown) => void;
      }) => void;
    };
    gapi?: {
      load: (api: string, callback: () => void) => void;
      client: {
        init: (config: { apiKey: string; discoveryDocs: string[] }) => Promise<void>;
      };
    };
    google?: {
      picker: {
        View: new (id: string) => { setMimeTypes: (mimeTypes: string) => void };
        PickerBuilder: new () => GooglePickerBuilder;
        Action: { PICKED: string };
        ViewId: { DOCS: string };
      };
      accounts?: {
        oauth2: {
          initTokenClient: (config: {
            client_id: string;
            scope: string;
            callback: (response: { access_token?: string; error?: string }) => void;
          }) => { requestAccessToken: () => void };
        };
      };
    };
  }
}

interface GooglePickerBuilder {
  addView: (view: InstanceType<Window['google']['picker']['View']>) => GooglePickerBuilder;
  setOAuthToken: (token: string) => GooglePickerBuilder;
  setDeveloperKey: (key: string) => GooglePickerBuilder;
  setOrigin: (origin: string) => GooglePickerBuilder;
  setCallback: (callback: (data: GooglePickerResponse) => void) => GooglePickerBuilder;
  build: () => { setVisible: (visible: boolean) => void };
}

interface FormatOptions {
  image: { image: string[] };
  compressor: { compressor: string[] };
  pdfs: { pdf_to_image: string[]; document: string[] };
  audio: { audio: string[] };
}

type SectionKey = keyof FormatOptions;
type SubSectionKey<T extends SectionKey> = keyof FormatOptions[T];

interface FileItem<T extends SectionKey = SectionKey> {
  file: File;
  showMenu: boolean;
  section: T;
  selectedFormat: string;
  source: 'local' | 'google' | 'dropbox';
  url: string;
  id: string;
  selectedSubSection: SubSectionKey<T>;
}

interface ConvertedFile {
  name: string;
  url: string;
  loading: boolean;
  converting: boolean;
  originalId: string;
}

interface ConversionFormat {
  name: string;
  target: string;
  type: SectionKey;
  subSection: string;
  id: string;
}

interface ConversionResponse {
  files: Array<{ name: string; path: string }>;
}

const supportedExtensions = [
  '.bmp', '.eps', '.ico', '.svg', '.tga', '.wbmp',
  '.pdf',
  '.aac', '.aiff', '.m4v', '.mmf', '.wma', '.3g2',
];

export default function Dropbox() {
  // Environment variables from .env
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID as string;
  const GOOGLE_API_KEY = import.meta.env.VITE_GOOGLE_API_KEY as string;
  const DROPBOX_APP_KEY = import.meta.env.VITE_DROPBOX_APP_KEY as string;
  const API_URL = import.meta.env.VITE_API_URL as string;

  const fileInputRef = useRef<HTMLInputElement>(null);
  const pickerLoaded = useRef(false);
  const [selectedFiles, setSelectedFiles] = useState<FileItem[]>([]);
  const [isConverting, setIsConverting] = useState(false);
  const [convertedFiles, setConvertedFiles] = useState<ConvertedFile[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  // Validate environment variables
  useEffect(() => {
    if (!GOOGLE_CLIENT_ID || !GOOGLE_API_KEY || !DROPBOX_APP_KEY || !API_URL) {
      setErrorMessage('Required API configuration is missing. Please contact support.');
      return;
    }
  }, [GOOGLE_CLIENT_ID, GOOGLE_API_KEY, DROPBOX_APP_KEY, API_URL]);

  // Load Google APIs and Dropbox SDK
  useEffect(() => {
    const loadGapiAndGis = () => {
      const gapiScript = document.createElement('script');
      gapiScript.src = 'https://apis.google.com/js/api.js';
      gapiScript.async = true;
      gapiScript.onload = () => {
        if (!window.gapi) {
          setErrorMessage('Failed to load Google API script. Check your network and try again.');
          return;
        }
        window.gapi.load('client:picker', async () => {
          try {
            await window.gapi.client.init({
              apiKey: GOOGLE_API_KEY,
              discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'],
            });
            pickerLoaded.current = true;
            console.log('Google API client initialized');
          } catch (err) {
            console.error('Failed to initialize gapi client:', err);
            setErrorMessage('Failed to initialize Google API client. Please try again later.');
          }
        });
      };
      gapiScript.onerror = () => {
        setErrorMessage('Failed to load Google API script. Check your network and try again.');
      };
      document.body.appendChild(gapiScript);

      const gisScript = document.createElement('script');
      gisScript.src = 'https://accounts.google.com/gsi/client';
      gisScript.async = true;
      gisScript.onload = () => {
        console.log('Google Identity Services loaded');
      };
      gisScript.onerror = () => {
        setErrorMessage('Failed to load Google Identity Services. Check your network and try again.');
      };
      document.body.appendChild(gisScript);

      const dropboxScript = document.createElement('script');
      dropboxScript.src = 'https://www.dropbox.com/static/api/2/dropins.js';
      dropboxScript.id = 'dropboxjs';
      dropboxScript.setAttribute('data-app-key', DROPBOX_APP_KEY);
      dropboxScript.async = true;
      dropboxScript.onerror = () => {
        setErrorMessage('Failed to load Dropbox SDK. Check your network and try again.');
      };
      document.body.appendChild(dropboxScript);
    };

    loadGapiAndGis();
  }, [GOOGLE_API_KEY, DROPBOX_APP_KEY]);

  // Map file extension to format section
  const getFormatSection = (ext: string): SectionKey => {
    ext = ext.toLowerCase();
    if (ext === 'pdf') return 'pdfs';
    if (['bmp', 'eps', 'ico', 'svg', 'tga', 'wbmp'].includes(ext)) return 'image';
    if (['aac', 'aiff', 'm4v', 'mmf', 'wma', '3g2'].includes(ext)) return 'audio';
    return 'image';
  };

  // Format options configuration
  const formatOptions: FormatOptions = {
    image: {
      image: ['BMP', 'EPS', 'ICO', 'SVG', 'TGA', 'WBMP'],
    },
    compressor: {
      compressor: ['SVG'],
    },
    pdfs: {
      pdf_to_image: ['JPG', 'PNG', 'GIF'],
      document: ['DOCX'],
    },
    audio: {
      audio: ['AAC', 'AIFF', 'M4V', 'MMF', 'WMA', '3G2'],
    },
  };

  // Trigger Google Drive Picker
  const handleGoogleDriveUpload = () => {
    if (!pickerLoaded.current) {
      setErrorMessage('Google Picker is not ready. Please try again shortly.');
      return;
    }
    triggerGoogleSignIn();
  };

  // Initialize Google Sign-In
  const triggerGoogleSignIn = () => {
    if (!window.google?.accounts?.oauth2) {
      setErrorMessage('Google Identity Services not loaded. Please try again later.');
      return;
    }

    const tokenClient = window.google.accounts.oauth2.initTokenClient({
      client_id: GOOGLE_CLIENT_ID,
      scope: 'https://www.googleapis.com/auth/drive.readonly',
      callback: (response: { access_token?: string; error?: string }) => {
        if (response.access_token) {
          setAccessToken(response.access_token);
          createGooglePicker(response.access_token);
        } else {
          console.error('No access token returned:', response.error);
          setErrorMessage('Google Sign-in failed. Please try again.');
        }
      },
    });

    tokenClient.requestAccessToken();
  };

  // Create Google Picker
  const createGooglePicker = (token: string) => {
    if (!pickerLoaded.current || !window.google?.picker?.PickerBuilder) {
      setErrorMessage('Google Picker API not loaded. Please try again later.');
      return;
    }

    try {
      const view = new window.google.picker.View(window.google.picker.ViewId.DOCS);
      view.setMimeTypes(
        supportedExtensions
          .map((ext) => `application/${ext.slice(1)},image/${ext.slice(1)},audio/${ext.slice(1)}`)
          .join(',')
      );
      const picker = new window.google.picker.PickerBuilder()
        .addView(view)
        .setOAuthToken(token)
        .setDeveloperKey(GOOGLE_API_KEY)
        .setOrigin(window.location.origin)
        .setCallback((data: GooglePickerResponse) => handlePickerResponse(data, token))
        .build();
      picker.setVisible(true);
    } catch (err) {
      console.error('Failed to create Google Picker:', err);
      setErrorMessage('Failed to initialize Google Picker. Please try again.');
    }
  };

  // Handle Google Picker response
  const handlePickerResponse = async (data: GooglePickerResponse, token: string) => {
    if (!window.google?.picker?.Action.PICKED || data.action !== window.google.picker.Action.PICKED) {
      return;
    }

    const docs = data.docs;
    if (selectedFiles.length + docs.length > 5) {
      setErrorMessage('Maximum 5 files allowed.');
      return;
    }

    if (!token) {
      setErrorMessage('Authentication expired. Please sign in again.');
      triggerGoogleSignIn();
      return;
    }

    const newFiles = await Promise.all(
      docs.map(async (doc) => {
        try {
          const response = await fetch(`https://www.googleapis.com/drive/v3/files/${doc.id}?alt=media`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('Google Drive API error:', errorData);
            if (response.status === 401) {
              setErrorMessage('Authentication expired. Please sign in again.');
              setAccessToken(null);
              triggerGoogleSignIn();
              return null;
            }
            throw new Error(`Failed to fetch file: ${doc.name}`);
          }
          const blob = await response.blob();
          const ext = doc.name.split('.').pop()?.toLowerCase() || '';
          if (!supportedExtensions.includes(`.${ext}`)) {
            console.error(`Unsupported file extension: ${ext}`);
            return null;
          }
          const section = getFormatSection(ext);
          const subSection = Object.keys(formatOptions[section])[0] as SubSectionKey<typeof section>;
          return {
            file: new File([blob], doc.name, { type: blob.type }),
            showMenu: false,
            section,
            selectedFormat: '',
            source: 'google' as const,
            url: doc.url,
            id: `${doc.name}_${Date.now()}_${Math.random().toString(36).slice(2, 15)}`,
            selectedSubSection: subSection,
          };
        } catch (err) {
          console.error(`Failed to fetch Google Drive file ${doc.name}:`, err);
          return null;
        }
      })
    );

    const validFiles = newFiles.filter((file): file is FileItem => file !== null);
    if (validFiles.length < docs.length) {
      setErrorMessage('Some files could not be loaded. Ensure they are supported formats.');
    }
    if (validFiles.length > 0) {
      setSelectedFiles((prev) => [...prev, ...validFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
    }
  };

  // Handle local file upload
  const handleLocalFileClick = () => {
    fileInputRef.current?.click();
  };

  const handleLocalFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    if (selectedFiles.length + files.length > 5) {
      setErrorMessage('Maximum 5 files allowed.');
      return;
    }

    const newFiles: FileItem[] = [];
    for (const file of Array.from(files)) {
      const ext = file.name.split('.').pop()?.toLowerCase() || '';
      if (!supportedExtensions.includes(`.${ext}`)) {
        setErrorMessage(`Unsupported file type: ${ext}. Supported types: ${supportedExtensions.join(', ')}`);
        continue;
      }
      const section = getFormatSection(ext);
      const subSection = Object.keys(formatOptions[section])[0] as SubSectionKey<typeof section>;
      newFiles.push({
        file,
        showMenu: false,
        section,
        selectedFormat: '',
        source: 'local' as const,
        id: `${file.name}_${Date.now()}_${Math.random().toString(36).slice(2, 15)}`,
        url: '',
        selectedSubSection: subSection,
      });
    }

    if (newFiles.length > 0) {
      setSelectedFiles((prev) => [...prev, ...newFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Handle Dropbox upload
  const handleDropboxUpload = () => {
    if (!window.Dropbox) {
      setErrorMessage('Dropbox SDK not loaded. Please try again later.');
      return;
    }

    window.Dropbox.choose({
      linkType: 'direct',
      multiselect: true,
      extensions: supportedExtensions,
      success: async (files: DropboxFile[]) => {
        if (selectedFiles.length + files.length > 5) {
          setErrorMessage('Maximum 5 files allowed.');
          return;
        }
        const newFiles: FileItem[] = [];
        for (const file of files) {
          try {
            const response = await fetch(file.link);
            if (!response.ok) {
              throw new Error(`Failed to fetch Dropbox file: ${file.name}`);
            }
            const blob = await response.blob();
            const ext = file.name.split('.').pop()?.toLowerCase() || '';
            if (!supportedExtensions.includes(`.${ext}`)) {
              console.error(`Unsupported file extension: ${ext}`);
              continue;
            }
            const section = getFormatSection(ext);
            const subSection = Object.keys(formatOptions[section])[0] as SubSectionKey<typeof section>;
            newFiles.push({
              file: new File([blob], file.name, { type: blob.type }),
              showMenu: false,
              section,
              selectedFormat: '',
              source: 'dropbox' as const,
              url: file.link,
              id: `${file.name}_${Date.now()}_${Math.random().toString(36).slice(2, 15)}`,
              selectedSubSection: subSection,
            });
          } catch (err) {
            console.error(`Error fetching Dropbox file ${file.name}:`, err);
            continue;
          }
        }
        if (newFiles.length < files.length) {
          setErrorMessage('Some files could not be loaded. Ensure they are supported formats.');
        }
        if (newFiles.length > 0) {
          setSelectedFiles((prev) => [...prev, ...newFiles]);
          setConvertedFiles([]);
          setErrorMessage(null);
        }
      },
      error: (err: unknown) => {
        console.error('Dropbox picker error:', err);
        setErrorMessage('Failed to load files from Dropbox. Please try again.');
      },
    });
  };

  // Toggle format selection menu
  const toggleMenu = (index: number) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) => ({
        ...item,
        showMenu: i === index ? !item.showMenu : false,
      }))
    );
  };

  // Remove a selected file
  const removeFile = (index: number) => {
    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));
    setConvertedFiles((prev) =>
      prev.filter((file) => !selectedFiles[index] || file.originalId !== selectedFiles[index].id)
    );
    setErrorMessage(null);
  };

  // Select a subsection for format options
  const selectSubSection = <T extends SectionKey>(index: number, subSection: SubSectionKey<T>) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) =>
        i === index
          ? { ...item, selectedSubSection: subSection as SubSectionKey<typeof item.section>, selectedFormat: '' }
          : item
      )
    );
  };

  // Select a format for conversion
  const selectFormat = <T extends SectionKey>(index: number, format: string, subSection: SubSectionKey<T>) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) =>
        i === index
          ? {
              ...item,
              selectedFormat: `${String(subSection)}:${format.toLowerCase()}`,
              showMenu: false,
              selectedSubSection: subSection as SubSectionKey<typeof item.section>,
            }
          : item
      )
    );
  };

  // Handle file conversion
  const handleConvert = async () => {
    if (isConverting) return;
    if (selectedFiles.length === 0) {
      setErrorMessage('No files selected for conversion.');
      return;
    }
    if (selectedFiles.some((item) => !item.selectedFormat)) {
      setErrorMessage('Please select a format for all files.');
      return;
    }
    if (selectedFiles.length > 5) {
      setErrorMessage('Maximum 5 files allowed.');
      return;
    }

    const formats: ConversionFormat[] = selectedFiles.map((item) => {
      const [subSection, target] = item.selectedFormat.split(':');
      return {
        name: item.file.name,
        target: target.toLowerCase(),
        type: item.section,
        subSection,
        id: item.id,
      };
    });

    setConvertedFiles(
      formats.map((format) => ({
        name: format.name,
        url: '',
        loading: false,
        converting: true,
        originalId: format.id,
      }))
    );

    setIsConverting(true);
    setErrorMessage(null);

    const formData = new FormData();
    selectedFiles.forEach((item) => {
      formData.append('files', item.file);
    });
    formData.append('formats', JSON.stringify(formats));

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
      }, 120000);

      const res = await fetch(`${API_URL}/api/convert`, {
        method: 'POST',
        body: formData,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.error || `Conversion failed with status ${res.status}`);
      }

      const data: ConversionResponse = await res.json();
      console.log('Conversion response:', data);

      const converted = await Promise.all(
        data.files.map(async (file, index) => {
          try {
            const fileRes = await fetch(`${API_URL}${file.path}`);
            if (!fileRes.ok) {
              throw new Error(`Failed to fetch converted file: ${file.name}`);
            }
            const blob = await fileRes.blob();
            const url = URL.createObjectURL(blob);
            return {
              name: file.name,
              url,
              loading: false,
              converting: false,
              originalId: formats[index].id,
            };
          } catch (err) {
            console.error(`Error fetching file ${file.name}:`, err);
            return null;
          }
        })
      );

      const validConverted = converted.filter((file): file is ConvertedFile => file !== null);
      setConvertedFiles(validConverted);
      if (validConverted.length === 0) {
        setErrorMessage('No files were converted successfully. Check file formats and try again.');
      } else if (validConverted.length < converted.length) {
        setErrorMessage('Some files failed to convert or download. Please check file formats and try again.');
      }
    } catch (err: unknown) {
      const msg = err instanceof Error ? err.message : 'Unknown error during conversion';
      console.error('Conversion error:', msg);
      setErrorMessage(
        msg.includes('AbortError')
          ? 'Conversion timed out after 120 seconds. Try smaller files or check server status.'
          : `Conversion failed: ${msg}`
      );
      setConvertedFiles((prev) =>
        prev.map((file) => ({ ...file, converting: false }))
      );
    } finally {
      setIsConverting(false);
    }
  };

  // Handle file download
  const handleDownload = async (url: string, name: string, index: number) => {
    setConvertedFiles((prev) =>
      prev.map((file, i) => (i === index ? { ...file, loading: true } : file))
    );
    try {
      const a = document.createElement('a');
      a.href = url;
      a.download = name;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      console.log(`Downloaded file: ${name}`);
    } catch (err: unknown) {
      console.error(`Error downloading file ${name}:`, err);
      setErrorMessage(`Failed to download ${name}. Please try again.`);
    } finally {
      setConvertedFiles((prev) =>
        prev.map((file, i) => (i === index ? { ...file, loading: false } : file))
      );
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center">
      <div className="flex flex-col items-center justify-center space-y-4 w-full max-w-3xl p-6">
        <div className="bg-white rounded-lg shadow-lg p-6 w-full">
          <div className="bg-red-500 text-white rounded-md px-8 py-4 flex items-center justify-center space-x-6">
            <span className="font-semibold text-lg">Choose Files</span>
            <FaFolderOpen
              onClick={handleLocalFileClick}
              title="Upload from device"
              className="text-2xl cursor-pointer hover:scale-110 transition"
            />
            <input
              ref={fileInputRef}
              type="file"
              multiple
              onChange={handleLocalFileChange}
              style={{ display: 'none' }}
              accept={supportedExtensions.join(',')}
            />
            <FaDropbox
              onClick={handleDropboxUpload}
              title="Upload from Dropbox"
              className="text-2xl cursor-pointer hover:scale-110 transition"
            />
            <FaGoogleDrive
              onClick={handleGoogleDriveUpload}
              title="Upload from Google Drive"
              className="text-2xl cursor-pointer hover:scale-110 transition"
            />
          </div>
          <div className="mt-3 text-sm text-gray-500 text-center">
            100 MB maximum file size and up to 5 files.
          </div>
          {errorMessage && (
            <div className="mt-4 text-red-600 text-sm font-medium text-center">{errorMessage}</div>
          )}
          <div className="mt-6 space-y-3">
            {selectedFiles.map((item, index) => {
              const convertedFile = convertedFiles.find((file) => file.originalId === item.id);
              const subSection = item.selectedSubSection || Object.keys(formatOptions[item.section])[0];
              return (
                <div key={item.id} className="relative bg-white rounded-md px-4 py-3 shadow border">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3 overflow-hidden">
                      {convertedFile?.converting ? (
                        <div className="flex items-center gap-2">
                          <div className="w-5 h-5 border-2 border-t-2 border-gray-300 border-t-red-500 rounded-full animate-spin" />
                          <span className="text-sm text-gray-500" aria-live="polite">
                            Converting...
                          </span>
                        </div>
                      ) : (
                        <span className="text-xl">📄</span>
                      )}
                      <p className="truncate max-w-[200px] text-sm font-medium">{item.file.name}</p>
                      <span className="text-sm text-gray-500">to</span>
                      <button
                        className="bg-gray-200 hover:bg-gray-300 text-sm rounded-md px-3 py-1"
                        onClick={() => toggleMenu(index)}
                        disabled={convertedFile?.converting}
                      >
                        {item.selectedFormat.split(':')[1]?.toUpperCase() || 'Select format'}
                      </button>
                    </div>
                    <div className="flex items-center gap-2">
                      {convertedFile && !convertedFile.converting && (
                        <button
                          onClick={() =>
                            handleDownload(
                              convertedFile.url,
                              convertedFile.name,
                              convertedFiles.findIndex((file) => file.originalId === item.id)
                            )
                          }
                          disabled={convertedFile.loading}
                          className="flex items-center gap-2 bg-yellow-500 text-white px-4 py-1 rounded-md text-sm font-semibold hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <FiDownload className="text-base" />
                          {convertedFile.loading ? 'Downloading...' : 'Download'}
                        </button>
                      )}
                      <button
                        className="text-gray-500 hover:text-red-600 transition text-xl"
                        onClick={() => removeFile(index)}
                        disabled={convertedFile?.converting}
                      >
                        ×
                      </button>
                    </div>
                  </div>
                  {item.showMenu && (
                    <div className="absolute top-full mt-2 right-0 bg-gray-800 text-white rounded-md p-4 w-[300px] shadow-xl text-sm font-medium z-50 flex">
                      <div className="flex flex-col border-r border-gray-600 pr-3 min-w-[100px]">
                        {Object.keys(formatOptions[item.section]).map((subSectionKey) => (
                          <button
                            key={subSectionKey}
                            className={`text-left px-2 py-1 rounded hover:bg-gray-700 ${
                              item.selectedSubSection === subSectionKey
                                ? 'text-white font-bold'
                                : 'text-gray-400'
                            }`}
                            onClick={() =>
                              selectSubSection(index, subSectionKey as SubSectionKey<typeof item.section>)
                            }
                          >
                            {subSectionKey.charAt(0).toUpperCase() +
                              subSectionKey.slice(1).replace('_', ' ')}
                          </button>
                        ))}
                      </div>
                      <div className="flex-1 pl-4">
                        <div className="grid grid-cols-2 gap-2">
                          {(formatOptions[item.section][subSection as keyof FormatOptions[typeof item.section]] as string[]).map(
                            (format) => (
                              <button
                                key={format}
                                className="bg-gray-700 hover:bg-red-600 transition px-3 py-2 rounded text-white text-xs"
                                onClick={() =>
                                  selectFormat(index, format, subSection as SubSectionKey<typeof item.section>)
                                }
                              >
                                {format}
                              </button>
                            )
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
        <div className="flex flex-col items-center space-y-2">
          <p className="text-gray-600 text-center mt-4">
            Ensure you have uploaded valid files, otherwise conversion may fail.
          </p>
          <button
            onClick={handleConvert}
            disabled={isConverting || selectedFiles.length === 0}
            className={`flex items-center gap-2 bg-red-500 text-white px-6 py-2 rounded-md text-base font-semibold hover:bg-red-600 transition ${
              isConverting || selectedFiles.length === 0 ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            <FiArrowRight className="text-lg" />
            {isConverting ? 'Converting...' : 'Convert Files'}
          </button>
        </div>
      </div>
    </div>
  );
}
then i have .env file 
i have frontend folder in that i have components folder in that i have Dropbox.tsx file 
import React, { useEffect, useRef, useState } from "react";
import { FaFolderOpen, FaDropbox, FaGoogleDrive } from "react-icons/fa";
import { FiArrowRight, FiDownload } from "react-icons/fi";

declare global {
  interface Window {
    Dropbox: any;
    gapi: any;
    google: any;
    onApiLoad?: () => void;
  }
}

interface FileItem {
  file: File;
  showMenu: boolean;
  section: keyof FormatOptions;
  selectedFormat: string;
  source: string;
  url: string;
  id: string;
  selectedSubSection?: string;
}

interface FormatOptions {
  image: {
    image: string[];
    compressor: string[];
    pdf: string[];
  };
  pdfs: {
    document: string[];
    compressor: string[];
    ebook: string[];
    pdf_ebook: string[];
    pdf_to_image: string[];
  };
  audio: {
    audio: string[];
  };
  video: {
    audio: string[];
    device: string[];
    video: string[];
    compressor: string[];
    webservice: string[];
  };
  document: string[];
  archive: string[];
  ebook: string[];
}

interface ConvertedFile {
  name: string;
  url: string;
  loading: boolean;
  converting: boolean;
  originalId: string;
}

export default function Dropbox() {
  const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID || "";
  const GOOGLE_API_KEY = import.meta.env.VITE_GOOGLE_API_KEY || "";
  const DROPBOX_APP_KEY = import.meta.env.VITE_DROPBOX_APP_KEY || "";
  const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000";

  const fileInputRef = useRef<HTMLInputElement>(null);
  const pickerLoaded = useRef(false);
  const [selectedFiles, setSelectedFiles] = useState<FileItem[]>([]);
  const [isConverting, setIsConverting] = useState(false);
  const [convertedFiles, setConvertedFiles] = useState<ConvertedFile[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  // Load Google APIs and Dropbox SDK
  useEffect(() => {
    const loadGapiAndGis = () => {
      const gapiScript = document.createElement("script");
      gapiScript.src = "https://apis.google.com/js/api.js";
      gapiScript.async = true;
      gapiScript.onload = () => {
        window.gapi.load("client:picker", async () => {
          try {
            await window.gapi.client.init({
              apiKey: GOOGLE_API_KEY,
              discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"],
            });
            pickerLoaded.current = true;
            console.log("Google API client initialized");
          } catch (err) {
            console.error("Failed to init gapi client:", err);
            setErrorMessage("Failed to initialize Google API client. Please try again later.");
          }
        });
      };
      gapiScript.onerror = () => {
        setErrorMessage("Failed to load Google API script.");
      };
      document.body.appendChild(gapiScript);

      const gisScript = document.createElement("script");
      gisScript.src = "https://accounts.google.com/gsi/client";
      gisScript.async = true;
      gisScript.onload = () => {
        console.log("Google Identity Services loaded");
      };
      gisScript.onerror = () => {
        setErrorMessage("Failed to load Google Identity Services script.");
      };
      document.body.appendChild(gisScript);

      const dropboxScript = document.createElement("script");
      dropboxScript.src = "https://www.dropbox.com/static/api/2/dropins.js";
      dropboxScript.id = "dropboxjs";
      dropboxScript.setAttribute("data-app-key", DROPBOX_APP_KEY);
      dropboxScript.async = true;
      dropboxScript.onerror = () => {
        setErrorMessage("Failed to load Dropbox SDK.");
      };
      document.body.appendChild(dropboxScript);
    };

    loadGapiAndGis();
  }, [GOOGLE_API_KEY, DROPBOX_APP_KEY]);

  // Map file extension to format section
  const getFormatSection = (ext: string): keyof FormatOptions => {
    ext = ext.toLowerCase();
    if (ext === "pdf") return "pdfs";
    if (["bmp", "eps", "gif", "ico", "png", "svg", "tga", "tiff", "wbmp", "webp", "jpg", "jpeg"].includes(ext))
      return "image";
    if (["doc", "docx", "txt", "rtf", "odt", "html", "ppt", "pptx", "xlsx"].includes(ext)) return "document";
    if (["mp3", "wav", "aac", "flac", "ogg", "opus", "wma", "aiff", "m4v", "mmf", "3g2"].includes(ext))
      return "audio";
    if (["mp4", "avi", "mov", "webm", "mkv", "flv", "wmv", "3gp", "mpg", "ogv"].includes(ext)) return "video";
    if (["zip", "7z"].includes(ext)) return "archive";
    if (["epub", "mobi", "azw3", "fb2", "lit", "lrf", "pdb", "tcr"].includes(ext)) return "ebook";
    return "image"; // Default fallback
  };

  // Format options configuration
  const formatOptions: FormatOptions = {
    image: {
      image: ["BMP", "EPS", "GIF", "ICO", "JPG", "PNG", "SVG", "TGA", "TIFF", "WBMP", "WEBP"],
      compressor: ["JPG", "PNG", "SVG"],
      pdf: ["PDF"],
    },
    pdfs: {
      document: ["DOCX", "TXT", "RTF", "ODT"],
      compressor: ["PDF"],
      ebook: ["EPUB", "MOBI", "AZW3"],
      pdf_ebook: ["EPUB", "MOBI", "AZW3"],
      pdf_to_image: ["JPG", "PNG", "GIF"],
    },
    audio: {
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "OGG", "OPUS", "WAV", "WMA", "3G2"],
    },
    video: {
      video: ["3G2", "3GP", "AVI", "FLV", "MKV", "MOV", "MPG", "OGV", "WEBM", "WMV"],
      audio: ["AAC", "AIFF", "FLAC", "M4V", "MMF", "MP3", "OGG", "OPUS", "WAV", "WMA", "3G2"],
      device: ["ANDROID", "BLACKBERRY", "IPAD", "IPHONE", "IPOD", "PLAYSTATION", "PSP", "WII", "XBOX"],
      compressor: ["MP4"],
      webservice: ["DAILYMOTION", "FACEBOOK", "INSTAGRAM", "TELEGRAM", "TWITCH", "TWITTER", "VIBER", "VIMEO", "WHATSAPP", "YOUTUBE"],
    },
    document: ["DOCX", "PDF", "TXT", "RTF", "ODT"],
    archive: ["ZIP", "7Z"],
    ebook: ["EPUB", "MOBI", "AZW3"],
  };

  // Trigger Google Drive Picker
  const handleGoogleDriveUpload = () => {
    if (!pickerLoaded.current) {
      setErrorMessage("Google Picker is not ready. Please try again shortly.");
      return;
    }
    triggerGoogleSignIn();
  };

  // Initialize Google Sign-In
  const triggerGoogleSignIn = () => {
    if (!window.google?.accounts?.oauth2) {
      setErrorMessage("Google Identity Services not loaded. Please try again.");
      return;
    }

    const tokenClient = window.google.accounts.oauth2.initTokenClient({
      client_id: GOOGLE_CLIENT_ID,
      scope: "https://www.googleapis.com/auth/drive.readonly",
      callback: (response: any) => {
        if (response?.access_token) {
          console.log("Received access token:", response.access_token);
          setAccessToken(response.access_token);
          createGooglePicker(response.access_token);
        } else {
          console.error("No access token returned:", response);
          setErrorMessage("Google Sign-in failed: No access token received.");
        }
      },
    });

    tokenClient.requestAccessToken();
  };

  // Create Google Picker
  const createGooglePicker = (token: string) => {
    if (pickerLoaded.current && window.google?.picker && typeof window.google.picker.PickerBuilder === "function") {
      try {
        const view = new window.google.picker.View(window.google.picker.ViewId.DOCS);
        const picker = new window.google.picker.PickerBuilder()
          .addView(view)
          .setOAuthToken(token)
          .setDeveloperKey(GOOGLE_API_KEY)
          .setOrigin(window.location.origin)
          .setCallback((data: any) => handlePickerResponse(data, token))
          .build();
        picker.setVisible(true);
      } catch (err) {
        console.error("Failed to create Google Picker:", err);
        setErrorMessage("Failed to initialize Google Picker. Please try again.");
      }
    } else {
      setErrorMessage("Google Picker API not loaded. Please try again.");
    }
  };

  // Handle Google Picker response
  const handlePickerResponse = async (data: any, token: string) => {
    if (data.action === window.google.picker.Action.PICKED) {
      const docs = data.docs;
      if (selectedFiles.length + docs.length > 5) {
        setErrorMessage("Maximum 5 files allowed.");
        return;
      }

      if (!token) {
        setErrorMessage("Access token missing. Please sign in again.");
        triggerGoogleSignIn();
        return;
      }

      const newFiles = await Promise.all(
        docs.map(async (doc: any) => {
          try {
            const response = await fetch(
              `https://www.googleapis.com/drive/v3/files/${doc.id}?alt=media`,
              {
                headers: { Authorization: `Bearer ${token}` },
              }
            );
            if (!response.ok) {
              const errorData = await response.json();
              console.error("API error details:", errorData);
              if (response.status === 401) {
                setErrorMessage("Unauthorized access. Please sign in again.");
                setAccessToken(null);
                triggerGoogleSignIn();
                return null;
              }
              throw new Error(`Failed to fetch file: ${response.status}, ${errorData.error?.message}`);
            }
            const blob = await response.blob();
            const ext = doc.name.split(".").pop()?.toLowerCase() || "bin";
            const section = getFormatSection(ext);
            return {
              file: new File([blob], doc.name, { type: blob.type }),
              showMenu: false,
              section: section as keyof FormatOptions,
              selectedFormat: "",
              source: "google",
              url: doc.url,
              id: `${doc.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
            };
          } catch (err) {
            console.error("Failed to fetch Google Drive file", doc.name, err);
            return null;
          }
        })
      );

      const validFiles = newFiles.filter((f): f is FileItem => f !== null);
      setSelectedFiles((prev) => [...prev, ...validFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
    }
  };

  // Handle local file upload
  const handleLocalFileClick = () => fileInputRef.current?.click();

  const handleLocalFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      if (selectedFiles.length + files.length > 5) {
        setErrorMessage("Maximum 5 files allowed.");
        return;
      }
      const newFiles = Array.from(files).map((f) => {
        const ext = f.name.split(".").pop()?.toLowerCase() || "";
        const section = getFormatSection(ext);
        return {
          file: f,
          showMenu: false,
          section: section as keyof FormatOptions,
          selectedFormat: "",
          source: "local",
          id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
        };
      });
      setSelectedFiles((prev) => [...prev, ...newFiles]);
      setConvertedFiles([]);
      setErrorMessage(null);
      if (fileInputRef.current) fileInputRef.current.value = "";
    }
  };

  // Handle Dropbox upload
  const handleDropboxUpload = () => {
    if (!window.Dropbox) {
      setErrorMessage("Dropbox SDK not loaded. Please ensure the Dropbox script is included.");
      return;
    }
    window.Dropbox.choose({
      linkType: "direct",
      multiselect: true,
      extensions: [
        ".mp3", ".wav", ".aac", ".flac", ".ogg", ".opus", ".wma", ".aiff", ".m4v", ".mmf", ".3g2",
        ".mp4", ".avi", ".mov", ".webm", ".mkv", ".flv", ".wmv", ".3gp", ".mpg", ".ogv",
        ".png", ".jpg", ".jpeg", ".webp", ".svg", ".bmp", ".gif", ".ico", ".tga", ".tiff", ".wbmp",
        ".pdf", ".doc", ".docx", ".txt", ".rtf", ".odt", ".html", ".ppt", ".pptx", ".xlsx",
        ".zip", ".7z",
        ".epub", ".mobi", ".azw3", ".fb2", ".lit", ".lrf", ".pdb", ".tcr",
      ],
      success: async (files: any[]) => {
        if (selectedFiles.length + files.length > 5) {
          setErrorMessage("Maximum 5 files allowed.");
          return;
        }
        const newFiles = await Promise.all(
          files.map(async (f) => {
            try {
              const response = await fetch(f.link);
              if (!response.ok) throw new Error(`Failed to fetch Dropbox file: ${f.name}`);
              const blob = await response.blob();
              const ext = f.name.split(".").pop()?.toLowerCase() || "";
              const section = getFormatSection(ext);
              return {
                file: new File([blob], f.name, { type: blob.type }),
                showMenu: false,
                section: section as keyof FormatOptions,
                selectedFormat: "",
                source: "dropbox",
                url: f.link,
                id: `${f.name}_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`,
              };
            } catch (err) {
              console.error(`Error fetching Dropbox file ${f.name}:`, err);
              return null;
            }
          })
        );
        const validFiles = newFiles.filter((f): f is FileItem => f !== null);
        setSelectedFiles((prev) => [...prev, ...validFiles]);
        setConvertedFiles([]);
        setErrorMessage(null);
      },
      error: (err: any) => {
        console.error("Dropbox picker error:", err);
        setErrorMessage("Failed to load files from Dropbox. Please try again.");
      },
    });
  };

  // Toggle format selection menu
  const toggleMenu = (index: number) => {
    setSelectedFiles((prev) =>
      prev.map((item, i) =>
        i === index ? { ...item, showMenu: !item.showMenu } : { ...item, showMenu: false }
      )
    );
  };

  // Remove a selected file
  const removeFile = (index: number) => {
    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));
    setErrorMessage(null);
  };

  // Select a subsection for format options
  const selectSubSection = (index: number, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedSubSection = subSection;
    updated[index].selectedFormat = "";
    setSelectedFiles(updated);
  };

  // Select a format for conversion
  const selectFormat = (index: number, format: string, subSection: string) => {
    const updated = [...selectedFiles];
    updated[index].selectedFormat = `${subSection}:${format}`;
    updated[index].showMenu = false;
    setSelectedFiles(updated);
  };

  // Handle file conversion
  const handleConvert = async () => {
    if (isConverting) return;
    if (selectedFiles.length === 0) {
      setErrorMessage("No files selected for conversion.");
      return;
    }

    if (selectedFiles.some((item) => !item.selectedFormat)) {
      setErrorMessage("Please select a format for all files.");
      return;
    }

    if (selectedFiles.length > 5) {
      setErrorMessage("Maximum 5 files allowed.");
      return;
    }

    console.log("Starting conversion for files:", selectedFiles.map((item) => ({
      name: item.file.name,
      id: item.id,
      format: item.selectedFormat,
    })));

    const formData = new FormData();
    const formats = selectedFiles.map((item) => {
      const [subSection, target] = item.selectedFormat.split(":");
      return {
        name: item.file.name,
        target: target.toLowerCase(),
        type: item.section,
        subSection,
        id: item.id,
      };
    });

    setConvertedFiles(
      formats.map((format) => ({
        name: format.name,
        url: "",
        loading: false,
        converting: true,
        originalId: format.id,
      }))
    );

    selectedFiles.forEach((item) => {
      formData.append("files", item.file);
    });
    formData.append("formats", JSON.stringify(formats));

    setIsConverting(true);
    setErrorMessage(null);

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort(new Error("Conversion request timed out after 120 seconds"));
      }, 120000);

      const res = await fetch(`${API_URL}/api/convert`, {
        method: "POST",
        body: formData,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || `Conversion failed with status ${res.status}`);
      }

      const data = await res.json();
      console.log("Conversion response:", data);

      const converted = await Promise.all(
        data.files.map(async (file: { name: string; path: string }, index: number) => {
          try {
            console.log(`Fetching converted file: ${file.name} from ${API_URL}${file.path}`);
            const fileRes = await fetch(`${API_URL}${file.path}`);
            if (!fileRes.ok) {
              throw new Error(`Failed to fetch converted file: ${file.name}, status: ${fileRes.status}`);
            }
            const blob = await fileRes.blob();
            const url = window.URL.createObjectURL(blob);
            const originalId = formats[index].id;
            return { name: file.name, url, loading: false, converting: false, originalId };
          } catch (err) {
            console.error(`Error fetching file ${file.name}:`, err);
            return null;
          }
        })
      );

      const validConverted = converted.filter((file): file is ConvertedFile => file !== null);
      console.log("Converted files set:", validConverted);
      setConvertedFiles(validConverted);
      if (converted.some((file) => file === null)) {
        setErrorMessage("Some files failed to convert or download. Please check file formats and try again.");
      } else if (validConverted.length === 0) {
        setErrorMessage("No files were converted successfully. Check file formats and try again.");
      } else {
        console.log("Conversion successful, files:", validConverted);
      }
    } catch (err) {
      const msg = err instanceof Error ? err.message : "Unknown error during conversion";
      console.error("Conversion error details:", {
        message: msg,
        name: err.name,
        stack: err.stack,
      });
      setErrorMessage(
        msg.includes("timeout")
          ? "Conversion timed out after 120 seconds. Try smaller files or check server status."
          : `Conversion failed: ${msg}`
      );
      setConvertedFiles((prev) =>
        prev.map((file) => ({ ...file, converting: false }))
      );
    } finally {
      setIsConverting(false);
    }
  };

  // Handle file download
  const handleDownload = async (url: string, name: string, index: number) => {
    setConvertedFiles((prev) =>
      prev.map((file, i) => (i === index ? { ...file, loading: true } : file))
    );
    try {
      const a = document.createElement("a");
      a.href = url;
      a.download = name;
      a.click();
      console.log(`Downloaded file: ${name}`);
    } catch (err) {
      console.error(`Error downloading file ${name}:`, err);
      setErrorMessage(`Failed to download ${name}. Please try again.`);
    } finally {
      setConvertedFiles((prev) =>
        prev.map((file, i) => (i === index ? { ...file, loading: false } : file))
      );
    }
  };

  return (
    <div>
      <div className="flex items-center justify-center">
        <div className="flex flex-col items-center justify-center space-y-2 converter-wrapper pt-10 m-4 rounded-md bg-white shadow-lg w-full max-w-3xl">
          <div className="bg-red-500 text-white gap-4 rounded-md px-8 py-6 flex items-center space-x-6 shadow-md w-[50%] justify-center">
            <span className="font-semibold text-[15px]">Choose Files</span>
            <FaFolderOpen
              onClick={handleLocalFileClick}
              title="Upload from device"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <input
              ref={fileInputRef}
              type="file"
              multiple
              onChange={handleLocalFileChange}
              style={{ display: "none" }}
              accept=".mp3,.wav,.aac,.flac,.ogg,.opus,.wma,.aiff,.m4v,.mmf,.3g2,.mp4,.avi,.mov,.webm,.mkv,.flv,.wmv,.3gp,.mpg,.ogv,.png,.jpg,.jpeg,.webp,.svg,.bmp,.gif,.ico,.tga,.tiff,.wbmp,.pdf,.doc,.docx,.txt,.rtf,.odt,.html,.ppt,.pptx,.xlsx,.zip,.7z,.epub,.mobi,.azw3,.fb2,.lit,.lrf,.pdb,.tcr"
            />
            <FaDropbox
              onClick={handleDropboxUpload}
              title="Upload from Dropbox"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
            <FaGoogleDrive
              onClick={handleGoogleDriveUpload}
              title="Upload from Google Drive"
              className="text-white text-[26px] cursor-pointer hover:scale-110 transition"
            />
          </div>
          <div className="dropboxfoot mt-3 text-sm text-gray-400">
            100 MB maximum file size and up to 5 files.
          </div>
          {errorMessage && (
            <div className="mt-4 text-red-500 text-sm font-medium">{errorMessage}</div>
          )}
          <div className="mt-6 w-full max-w-2xl space-y-3">
            {selectedFiles.map((item, index) => {
              const convertedFile = convertedFiles.find((file) => file.originalId === item.id);
              console.log(
                `Checking match for ${item.file.name} (ID: ${item.id}):`,
                convertedFile ? convertedFile.name : "No match"
              );
              return (
                <div
                  key={item.id}
                  className="relative bg-white text-gray-700 rounded-md px-4 py-3 shadow-md border mb-2"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3 overflow-hidden">
                      {convertedFile?.converting ? (
                        <div className="flex items-center gap-2">
                          <div className="w-5 h-5 border-2 border-t-2 border-gray-300 border-t-red-500 rounded-full animate-spin"></div>
                          <span className="text-sm text-gray-400" aria-live="polite">Converting...</span>
                        </div>
                      ) : (
                        <span className="text-xl">📄</span>
                      )}
                      <p className="truncate max-w-[160px] text-sm font-medium">{item.file.name}</p>
                      <span className="text-sm text-gray-400">to</span>
                      <button
                        className="bg-gray-200 hover:bg-gray-300 text-sm rounded-md px-2 py-1"
                        onClick={() => toggleMenu(index)}
                        disabled={convertedFile?.converting}
                      >
                        {item.selectedFormat.split(":")[1] || "Select format"}
                      </button>
                    </div>
                    <div className="flex items-center gap-2">
                      {convertedFile && !convertedFile.converting && (
                        <button
                          onClick={() =>
                            handleDownload(
                              convertedFile.url,
                              convertedFile.name,
                              convertedFiles.findIndex((file) => file.originalId === item.id)
                            )
                          }
                          disabled={convertedFile.loading}
                          className="flex items-center gap-2 bg-yellow-500 text-white px-4 py-1 rounded-md text-[14pt] font-semibold hover:bg-yellow-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          <FiDownload className="text-[16px]" />
                          {convertedFile.loading ? "Downloading..." : "Download"}
                        </button>
                      )}
                      <button
                        className="text-gray-400 hover:text-red-500 transition text-xl"
                        onClick={() => removeFile(index)}
                        disabled={convertedFile?.converting}
                      >
                        ×
                      </button>
                    </div>
                  </div>
                  {item.showMenu && (
                    <div className="absolute top-full mt-2 right-12 bg-[#1f1f1f] text-white rounded-md p-4 w-[340px] shadow-xl text-sm font-medium z-50 flex">
                      <div className="flex flex-col border-r border-gray-700 pr-3 min-w-[100px]">
                        {Object.keys(formatOptions[item.section]).map((subSection) => (
                          <button
                            key={subSection}
                            className={`text-left px-2 py-1 rounded hover:bg-[#333] ${item.selectedSubSection === subSection ? "text-white font-bold" : "text-gray-400"
                              }`}
                            onClick={() => selectSubSection(index, subSection)}
                          >
                            {subSection.charAt(0).toUpperCase() + subSection.slice(1).replace("_", " ")}
                          </button>
                        ))}
                      </div>
                      <div className="flex-1 pl-4">
                        <div className="grid grid-cols-2 gap-2">
                          {formatOptions[item.section][
                            item.selectedSubSection || Object.keys(formatOptions[item.section])[0]
                          ].map((format) => (
                            <button
                              key={format}
                              className="bg-[#333] hover:bg-red-600 transition px-3 py-2 rounded text-white text-xs"
                              onClick={() =>
                                selectFormat(
                                  index,
                                  format,
                                  item.selectedSubSection || Object.keys(formatOptions[item.section])[0]
                                )
                              }
                            >
                              {format}
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </div>
      <div className="flex flex-col items-center justify-center space-y-2 rounded-md">
        <h1 className="text-gray-500 text-center mt-4">
          Make sure you have uploaded valid files otherwise conversion will not be correct
        </h1>
        <button
          onClick={handleConvert}
          disabled={isConverting || selectedFiles.length === 0}
          className={`flex items-center gap-2 bg-red-400 text-white px-5 py-2 rounded-md text-[15px] font-semibold mt-2 hover:bg-red-500 transition ${isConverting || selectedFiles.length === 0 ? "opacity-50 cursor-not-allowed" : ""
            }`}
        >
          <FiArrowRight className="text-[16px]" />
          {isConverting ? "Converting..." : "Convert files"}
        </button>
      </div>
    </div>
  );
}
then i have .env file 
VITE_GOOGLE_CLIENT_ID=866725812936-fvjl5btdg8d8s8mc03aihrvs3tmj3q6h.apps.googleusercontent.com
VITE_GOOGLE_API_KEY=AIzaSyDtxORXGl-d3mMhG4TKBGS90scPCX7JGyM
VITE_DROPBOX_APP_KEY=2434iawyecdjpxc
VITE_API_URL=https://nion-rqsx.onrender.com

this is my frontend code 
